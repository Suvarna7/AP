/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dias;

import Jama.Matrix;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import dias.MemoryStaticVariables.*;
/**
 *
 * @author Mert
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        //set up default values based on configuration file
        jTextField1.setText(Integer.toString(DIAS.gs_initial));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RunInput = new javax.swing.JButton();
        ClearHistoryButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        GetInputsButton = new javax.swing.JButton();
        jBolusLabel = new javax.swing.JLabel();
        jBasalLabel = new javax.swing.JLabel();
        jBolusValue = new javax.swing.JLabel();
        jBasalValue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RunInput.setText("Run");
        RunInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunInputActionPerformed(evt);
            }
        });

        ClearHistoryButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ClearHistoryButton.setForeground(new java.awt.Color(255, 0, 0));
        ClearHistoryButton.setText("Clear History");
        ClearHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearHistoryButtonActionPerformed(evt);
            }
        });

        jButton3.setText("(No)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SaveButton.setForeground(new java.awt.Color(255, 0, 51));
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        LoadButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LoadButton.setForeground(new java.awt.Color(255, 0, 51));
        LoadButton.setText("Load");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("CLEAR HISTORY & SAVE-LOAD");

        jTextField1.setText("185");
        jTextField1.setToolTipText("");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("0.3");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setText("0.2");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jTextField4.setText("0");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jTextField5.setText("0");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel2.setText("Gs_in");

        jLabel3.setText("Ee_in");

        jLabel4.setText("Gsr_in");

        jLabel5.setText("Sleep_in");

        jLabel6.setText("Phys_act_in");

        jLabel7.setText("Body_weight");

        jTextField6.setText("85");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        GetInputsButton.setText("GetInputs");
        GetInputsButton.setToolTipText("");
        GetInputsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetInputsButtonActionPerformed(evt);
            }
        });

        jBolusLabel.setText("Bolus Insulin:");

        jBasalLabel.setText("Basal Insulin:");

        jBolusValue.setText("0");

        jBasalValue.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RunInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(123, 123, 123))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ClearHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(254, 254, 254)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(92, 92, 92)
                                        .addComponent(jBolusLabel))
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(226, 226, 226)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jBasalLabel))
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(GetInputsButton))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBolusValue)
                            .addComponent(jBasalValue))
                        .addGap(0, 135, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClearHistoryButton)
                    .addComponent(SaveButton)
                    .addComponent(LoadButton)
                    .addComponent(RunInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jBolusLabel)
                    .addComponent(jBolusValue))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jBasalLabel)
                            .addComponent(jBasalValue))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(GetInputsButton)
                .addGap(74, 74, 74))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action perform to run the control algorithm
     *
     * @param evt
     */
    private void RunInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunInputActionPerformed

        //1. CGM Prediction
        CGM__SEDFR_JF cs = new CGM__SEDFR_JF();
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();

        //Virtual CGM generator:
        VirtualCgm vcgm = new VirtualCgm(m20150711_load_global_variables.kj, DIAS.gs_initial);
        m20150711_load_global_variables.kj++;
        vcgm.gstemp = DIAS.createnewMatrix(1, m20150711_load_global_variables.kj, vcgm.getVirtualCgmValue());
        
        m20150711_load_global_variables.gs = DIAS.createnewMatrix(1, m20150711_load_global_variables.kj, m20150711_load_global_variables.gs);
        m20150711_load_global_variables.gs = vcgm.gstemp;

        int flag_noise = 1;

        if (m20150711_load_global_variables.kj > 20) {
            m20150711_load_global_variables.bolus_insulin = DIAS.createnewMatrix(m20150711_load_global_variables.kj,
                    1, m20150711_load_global_variables.bolus_insulin);
        }

        if (m20150711_load_global_variables.kj > 20) {
            m20150711_load_global_variables.basal_insulin = DIAS.createnewMatrix(8, 
                    m20150711_load_global_variables.kj, m20150711_load_global_variables.basal_insulin);
        }

        /* CGM__SEDFR_JF csedfrJF = new CGM__SEDFR_JF(vcgm.gstemp,lgvariables.bolus_insulin,lgvariables.basal_insulin,flag_noise);
        try {
         lgvariables.CGM_retuning_with_noise_generator =csedfrJF.CGM();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     flag_noise=0;
     
     csedfrJF = new CGM__SEDFR_JF(vcgm.gstemp,lgvariables.bolus_insulin,lgvariables.basal_insulin,flag_noise);
        try {
         lgvariables.CGM_retuning_without_noise_generator =csedfrJF.CGM();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }   */
        m20150711_load_global_variables.ee = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.ee.getColumnDimension() + 1, 
                m20150711_load_global_variables.ee);
        m20150711_load_global_variables.gsr = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.gsr.getColumnDimension() + 1, 
                m20150711_load_global_variables.gsr);
        m20150711_load_global_variables.sleep = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.sleep.getColumnDimension() + 1, 
                m20150711_load_global_variables.sleep);
        m20150711_load_global_variables.phys_act = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.phys_act.getColumnDimension() + 1, 
                m20150711_load_global_variables.phys_act);

        m20150711_get_armband_data getarmbanddata = new m20150711_get_armband_data(m20150711_load_global_variables.ee, 
                m20150711_load_global_variables.gsr, m20150711_load_global_variables.sleep, m20150711_load_global_variables.phys_act);
        m20150711_load_global_variables.armband_data_with_time = getarmbanddata.m20150711_get_armband_data();
        m20150711_load_global_variables.ee.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.eedouble);
        m20150711_load_global_variables.gsr.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.gsrdouble);
        m20150711_load_global_variables.sleep.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.sleepdouble);
        m20150711_load_global_variables.phys_act.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.phys_actdouble);

        Matrix basal_temp = new Matrix(1, m20150711_load_global_variables.basal_insulin.getColumnDimension());

        for (int i = 0; i < m20150711_load_global_variables.basal_insulin.getColumnDimension(); i++) {
            basal_temp.set(0, i, m20150711_load_global_variables.basal_insulin.get(0, i));
        }

        /*     ///////////////////////////////////////INPUTS IOB_CALCULATE///////////////////////////////////////////////////////////////////////////////
               System.out.println("////////////////////////INPUTS IOB_CALC////////////////////////////////////////////////////////////////////////////");
               cs.printMatrix(lgvariables.bolus_insulin,"lgvariables.bolus_insulin");
               cs.printMatrix(basal_temp,"basal_temp");
               System.out.println("////////////////////////INPUTS IOB_CALC////////////////////////////////////////////////////////////////////////////");*/
       //IOB  module - calculate insulin on board
        m20150711_calculate_IOB IOBcalculate = new m20150711_calculate_IOB(m20150711_load_global_variables.bolus_insulin, basal_temp);
        m20150711_load_global_variables.IOB_total = DIAS.createnewMatrix(m20150711_load_global_variables.kj + 1,
                1, m20150711_load_global_variables.IOB_total);
        m20150711_load_global_variables.IOB_total.set(m20150711_load_global_variables.kj, 0, IOBcalculate.IOB());

        /*    /////////////////////////////////OUTPUTS IOB_CALCULATE////////////////////////////////////////////////////////////////////////////////////
               System.out.println("////////////////////////OUTPUT IOB_CALC////////////////////////////////////////////////////////////////////////////");
               cs.printMatrix(lgvariables.IOB_total," lgvariables.IOB_total");
               System.out.println("////////////////////////OUTPUT IOB_CALC////////////////////////////////////////////////////////////////////////////");
               ////////////////////////////////OUTPUTS IOB_CALCULATE////////////////////////////////////////////////////////////////////////////////////*/
       //TODO Meal detection:
       // CGM values - from gstemp
        m20150711_run_meal_detection_bolus_algorithm rmdetectionbolusalgorithm = new m20150711_run_meal_detection_bolus_algorithm(lgvariables.meal_states, lgvariables.meal_covariance, lgvariables.bolus_insulin, lgvariables.meal_bolus_amount, lgvariables.meal_detection, lgvariables.meal_detection_time, lgvariables.correction_bolus_amount, lgvariables.correction_detection, lgvariables.correction_detection_time, lgvariables.correction_limit, vcgm.gstemp, lgvariables.kj, lgvariables.meal_g_basal, lgvariables.meal_gpc_gs_slope_degree, lgvariables.meal_gpc_mu, lgvariables.sleep, lgvariables.phys_act, lgvariables.IOB_total, lgvariables.body_weight);
        rmdetectionbolusalgorithm.run_meal_detection_bolus_algorithm();

        //TODO GPC 
        // CGM values - from gstemp
        Matrix matrixGPC = new Matrix(8, 1);
        m20150711_gpc m_gpc = new m20150711_gpc(vcgm.gstemp, lgvariables.ee, lgvariables.gsr, lgvariables.kj, lgvariables.phi, lgvariables.phi_ee, lgvariables.phi_gsr, lgvariables.armax_parameters, lgvariables.armax_covariance, lgvariables.armax_lamda, lgvariables.armax_err, lgvariables.arma_parameters_ee, lgvariables.arma_lamda_ee, lgvariables.arma_covariance_ee, lgvariables.arma_err_ee, lgvariables.arma_parameters_gsr, lgvariables.arma_lamda_gsr, lgvariables.arma_covariance_gsr, lgvariables.arma_err_gsr, lgvariables.A_state, lgvariables.A_state_ee, lgvariables.A_state_gsr, lgvariables.C_state, lgvariables.C_state_ee, lgvariables.C_state_gsr, lgvariables.B_state, lgvariables.K_state, lgvariables.K_state_ee, lgvariables.K_state_gsr, lgvariables.M, lgvariables.L, lgvariables.L_ee, lgvariables.L_gsr, lgvariables.M_ee, lgvariables.M_gsr, lgvariables.X_state, lgvariables.X_state_ee, lgvariables.X_state_gsr, lgvariables.ee_prediction, lgvariables.gsr_prediction, lgvariables.g_prediction, lgvariables.reference_glucose, lgvariables.insulin_sensitivity_constant, lgvariables.basal_insulin, lgvariables.IOB_prediction, lgvariables.maximum_insulin, lgvariables.total_daily_unit, lgvariables.insulin_sensitivity_factor, lgvariables.body_weight, lgvariables.meal_gpc_mu, lgvariables.bolus_insulin, 0, matrixGPC);
        m_gpc.gpc();

        //TODO CPA module
        // CGM values - from gstemp

        CPA_Module_paralleled_calculation_JF CPA_module_paralleled_cal = new CPA_Module_paralleled_calculation_JF(vcgm.gstemp, lgvariables.ee, lgvariables.gsr, lgvariables.kj, lgvariables.phi, lgvariables.phi_ee, lgvariables.phi_gsr, lgvariables.armax_parameters, lgvariables.armax_covariance, lgvariables.armax_lamda, lgvariables.armax_err, lgvariables.arma_parameters_ee, lgvariables.arma_lamda_ee, lgvariables.arma_covariance_ee, lgvariables.arma_err_ee, lgvariables.arma_parameters_gsr, lgvariables.arma_lamda_gsr, lgvariables.arma_covariance_gsr, lgvariables.arma_err_gsr, lgvariables.A_state, lgvariables.A_state_ee, lgvariables.A_state_gsr, lgvariables.C_state, lgvariables.C_state_ee, lgvariables.C_state_gsr, lgvariables.B_state, lgvariables.K_state, lgvariables.K_state_ee, lgvariables.K_state_gsr, lgvariables.M, lgvariables.L, lgvariables.L_ee, lgvariables.L_gsr, lgvariables.M_ee, lgvariables.M_gsr, lgvariables.X_state, lgvariables.X_state_ee, lgvariables.X_state_gsr, lgvariables.ee_prediction, lgvariables.gsr_prediction, lgvariables.g_prediction, lgvariables.reference_glucose, lgvariables.insulin_sensitivity_constant, lgvariables.basal_insulin, lgvariables.IOB_prediction, lgvariables.maximum_insulin, lgvariables.total_daily_unit, lgvariables.insulin_sensitivity_factor, lgvariables.body_weight, lgvariables.meal_gpc_mu, lgvariables.bolus_insulin);
        try {
            CPA_module_paralleled_cal.CPA();
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Hypo glucemia alarm calculator
        // CGM values - from gstemp
        hypo_alarm hypo = new hypo_alarm(lgvariables.hypo_threshold.transpose(), lgvariables.hypo_slope_degree.transpose(), lgvariables.hypo_alarm.transpose(), lgvariables.carb_amount, lgvariables.carb_type, lgvariables.hypo_phase.transpose(), lgvariables.hypo_phase_old.transpose(), lgvariables.repeated_immediate_alarm.transpose(), vcgm.gstemp, lgvariables.kj, lgvariables.g_prediction, lgvariables.phys_act, lgvariables.sleep);
        hypo.m20150711_hypo_alarm();

        if (lgvariables.phys_act.get(0, lgvariables.kj - 1) == 1) {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Exercise";
        } else if (lgvariables.sleep.get(0, lgvariables.kj - 1) == 1) {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Sleep";
        } else if (lgvariables.meal_detection.get(lgvariables.kj - 1, 0) == 1) {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Meal";
        } else {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Other";
        }

        lgvariables.batch_CL = hypo.createnewString(lgvariables.kj + 1, lgvariables.batch_CL);
        lgvariables.basal_insulin_calculated = DIAS.createnewMatrix(8, lgvariables.basal_insulin.getColumnDimension() + 1, lgvariables.basal_insulin_calculated);
        lgvariables.bolus_insulin_calculated = DIAS.createnewMatrix(lgvariables.bolus_insulin.getRowDimension() + 1, 1, lgvariables.bolus_insulin_calculated);
        lgvariables.basal_insulin_calculated = lgvariables.basal_insulin;
        lgvariables.bolus_insulin_calculated = lgvariables.bolus_insulin;

        /*       if (lgvariables.hypo_alarm.get(lgvariables.kj,0)==1 && lgvariables.hypo_phase.get(lgvariables.kj,0)==5 && lgvariables.repeated_immediate_alarm.get(lgvariables.kj,0)==0){
        send_text_message stm = new send_text_message ("mertsevil1991@gmail.com", "mertsevil1991@hotmail.com", "Immediate Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of,  "+lgvariables.carb_type[lgvariables.kj],"Immediate Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of,  "+lgvariables.carb_type[lgvariables.kj]);
        try { 
            stm.generateAndSendEmail();
        } catch (MessagingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
          }
    else if (lgvariables.hypo_alarm.get(lgvariables.kj,0)==1 && lgvariables.hypo_phase.get(lgvariables.kj,0)==5 && lgvariables.repeated_immediate_alarm.get(lgvariables.kj,0)==1){
        send_text_message stm = new send_text_message ("mertsevil1991@gmail.com", "mertsevil1991@hotmail.com", "Immediate Alarm: This carb may not be needed. Confirm with subject or MD,Consume "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj],"Immediate Alarm: This carb may not be needed. Confirm with subject or MD,Consume "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj]);
        try { 
            stm.generateAndSendEmail();
        } catch (MessagingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
    else if (lgvariables.hypo_alarm.get(lgvariables.kj,0)==1 && lgvariables.hypo_phase.get(lgvariables.kj,0)<5){
    send_text_message stm = new send_text_message ("mertsevil1991@gmail.com", "mertsevil1991@hotmail.com", "Early Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj],"Early Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj]);
        try { 
            stm.generateAndSendEmail();
        } catch (MessagingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         }*/
        SaveAllData saveall = new SaveAllData();
        saveall.saveall();

        //////////////////////////OUTPUTS///////////////////////////////////////////////////////////////////////////////////////////////////////////
        System.out.println("Kj: " + m20150711_load_global_variables.kj);
        DIAS.printMatrix(vcgm.gstemp, "vcgm.gstemp");
        DIAS.printMatrix(m20150711_load_global_variables.bolus_insulin, "lgvariables.bolus_insulin");
        DIAS.printMatrix(m20150711_load_global_variables.basal_insulin, "lgvariables.basal_insulin");
        //TODO Update output values in GUI
        jBolusValue.setText("1"); 
        jBasalValue.setText("1"); 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    }//GEN-LAST:event_RunInputActionPerformed

    private void ClearHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearHistoryButtonActionPerformed
        // TODO add your handling code here:
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        lgvariables.setup();
    }//GEN-LAST:event_ClearHistoryButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        load_plsdata730_R_12_withcluster lpls = new load_plsdata730_R_12_withcluster();

        try {
            lpls.loadplsdata();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        plsdata_730_R_12_withcluster_16_data pls730R = new plsdata_730_R_12_withcluster_16_data();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        VirtualCgm vcgm = new VirtualCgm(lgvariables.kj, DIAS.gs_initial);

        Save savedata = new Save(DIAS.excelSubdirectory);

        try {
            savedata.save(lgvariables.basal_insulin, "basal_insulin");
            savedata.save(lgvariables.bolus_insulin, "bolus_insulin");
            savedata.save(lgvariables.ee, "ee");
            savedata.save(lgvariables.phys_act, "phys_act");
            savedata.save(lgvariables.sleep, "sleep");
            savedata.save(lgvariables.gsr, "gsr");
            savedata.save(lgvariables.IOB_total, "IOB_total");
            savedata.save(lgvariables.meal_states, "meal_states");
            savedata.save(lgvariables.meal_bolus_amount, "meal_bolus_amount");
            savedata.save(lgvariables.meal_detection, "meal_detection");
            savedata.save(lgvariables.meal_detection_time, "meal_detection_time");
            savedata.save(lgvariables.correction_bolus_amount, "correction_bolus_amount");
            savedata.save(lgvariables.correction_detection, "correction_detection");
            savedata.save(lgvariables.correction_detection_time, "correction_detection_time");
            savedata.save(lgvariables.correction_limit, "correction_limit");
            savedata.save(lgvariables.meal_g_basal, "meal_g_basal");
            savedata.save(lgvariables.meal_gpc_gs_slope_degree, "meal_gpc_gs_slope_degree");
            savedata.save(lgvariables.meal_gpc_mu, "meal_gpc_mu");
            savedata.save(lgvariables.phi, "phi");
            savedata.save(lgvariables.phi_ee, "phi_ee");
            savedata.save(lgvariables.phi_gsr, "phi_gsr");
            savedata.save(lgvariables.armax_parameters, "armax_parameters");
            savedata.save(lgvariables.armax_lamda, "armax_lamda");
            savedata.save(lgvariables.armax_err, "armax_err");
            savedata.save(lgvariables.arma_parameters_ee, "arma_parameters_ee");
            savedata.save(lgvariables.arma_lamda_ee, "arma_lamda_ee");
            savedata.save(lgvariables.arma_err_ee, "arma_err_ee");
            savedata.save(lgvariables.arma_parameters_gsr, "arma_parameters_gsr");
            savedata.save(lgvariables.arma_lamda_gsr, "arma_lamda_gsr");
            savedata.save(lgvariables.arma_err_gsr, "arma_err_gsr");
            savedata.save(lgvariables.X_state, "X_state");
            savedata.save(lgvariables.X_state_ee, "X_state_ee");
            savedata.save(lgvariables.X_state_gsr, "X_state_gsr");
            savedata.save(lgvariables.ee_prediction, "ee_prediction");
            savedata.save(lgvariables.gsr_prediction, "gsr_prediction");
            savedata.save(lgvariables.g_prediction, "g_prediction");
            savedata.save(lgvariables.reference_glucose, "reference_glucose");
            savedata.save(lgvariables.insulin_sensitivity_constant, "insulin_sensitivity_constant");
            savedata.save(lgvariables.IOB_prediction, "IOB_prediction");
            savedata.save(lgvariables.maximum_insulin, "maximum_insulin");
            savedata.save(lgvariables.total_daily_unit, "total_daily_unit");
            savedata.save(lgvariables.insulin_sensitivity_factor, "insulin_sensitivity_factor");
            savedata.save(lgvariables.hypo_threshold, "hypo_threshold");
            savedata.save(lgvariables.hypo_slope_degree, "hypo_slope_degree");
            savedata.save(lgvariables.hypo_alarm, "hypo_alarm");
            savedata.save(lgvariables.hypo_phase, "hypo_phase");
            savedata.save(lgvariables.hypo_phase_old, "hypo_phase_old");
            savedata.save(lgvariables.repeated_immediate_alarm, "repeated_immediate_alarm");
            savedata.save(lgvariables.bolus_insulin_calculated, "bolus_insulin_calculated");
            savedata.save(lgvariables.basal_insulin_calculated, "basal_insulin_calculated");
            savedata.save(lgvariables.gs, "gs");

            savedata.savedouble(lgvariables.CGM_retuning_with_noise_generator, "CGM_retuning_with_noise_generator");
            savedata.savedouble(lgvariables.CGM_retuning_without_noise_generator, "CGM_retuning_without_noise_generator");
            savedata.savedouble(lgvariables.body_weight, "body_weight");
            savedata.savedouble(lgvariables.kj, "kj");

            for (int i = 0; i < lgvariables.kj + 1; i++) {
                savedata.save3D(savedata.change(lgvariables.meal_covariance, i), "meal_covariance", i);
                savedata.save3D(savedata.change(lgvariables.armax_covariance, i), "armax_covariance", i);
                savedata.save3D(savedata.change(lgvariables.arma_covariance_ee, i), "arma_covariance_ee", i);
                savedata.save3D(savedata.change(lgvariables.arma_covariance_gsr, i), "arma_covariance_gsr", i);
                savedata.save3D(savedata.change(lgvariables.A_state, i), "A_state", i);
                savedata.save3D(savedata.change(lgvariables.A_state_ee, i), "A_state_ee", i);
                savedata.save3D(savedata.change(lgvariables.A_state_gsr, i), "A_state_gsr", i);
                savedata.save3D(savedata.change(lgvariables.C_state, i), "C_state", i);
                savedata.save3D(savedata.change(lgvariables.C_state_ee, i), "C_state_ee", i);
                savedata.save3D(savedata.change(lgvariables.C_state_gsr, i), "C_state_gsr", i);
                savedata.save3D(savedata.change(lgvariables.B_state, i), "B_state", i);
                savedata.save3D(savedata.change(lgvariables.K_state, i), "K_state", i);
                savedata.save3D(savedata.change(lgvariables.K_state_ee, i), "K_state_ee", i);
                savedata.save3D(savedata.change(lgvariables.K_state_gsr, i), "K_state_gsr", i);
                savedata.save3D(savedata.change(lgvariables.M, i), "M", i);
                savedata.save3D(savedata.change(lgvariables.M_ee, i), "M_ee", i);
                savedata.save3D(savedata.change(lgvariables.M_gsr, i), "M_gsr", i);
                savedata.save3D(savedata.change(lgvariables.L, i), "L", i);
                savedata.save3D(savedata.change(lgvariables.L_ee, i), "L_ee", i);
                savedata.save3D(savedata.change(lgvariables.L_gsr, i), "L_gsr", i);
            }

            savedata.saveString(lgvariables.batch_CL, "batch_CL");
            savedata.saveString(lgvariables.carb_type, "carb_type");
            savedata.saveString(lgvariables.carb_amount, "carb_amount");

            prevdata_error_summation prdata = new prevdata_error_summation();
            temp_SEDFR_noise tempSnoise = new temp_SEDFR_noise();
            temp_SEDFR_nonoise tempSnonoise = new temp_SEDFR_nonoise();

            savedata.savedouble(TrackData.I_error_rspeed, "I_error_rspeed");
            savedata.savedouble(TrackData.I_me_inst, "I_me_inst");
            savedata.save(TrackData.I_track, "I_track");
            savedata.save(TrackData.data_mem, "data_mem");
            savedata.save(TrackData.I_u_constrain, "I_u_constrain");

            savedata.save(ChangeVariable.compensate_ins, "compensate_ins");
            savedata.save(ChangeVariable.flag_constrains, "flag_constrains");
            savedata.save(ChangeVariable.flag_ratio, "flag_ratio");
            savedata.save(ChangeVariable.g_prediction_feedback, "g_prediction_feedback");
            savedata.save(ChangeVariable.ins_CPA, "ins_CPA");
            savedata.save(ChangeVariable.insulin_CPA, "insulin_CPA");
            savedata.save(ChangeVariable.lamda_CPA, "lamda_CPA");
            savedata.save(ChangeVariable.sensor_error, "sensor_error");

            savedata.save(prdata.D_potential, "D_potential");
            savedata.save(prdata.error_summation, "error_summation");
            savedata.savedouble(prdata.EE, "EE");
            savedata.savedouble(prdata.ME, "ME");

        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_SaveButtonActionPerformed

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        // TODO add your handling code here:
// There used to be a call to the CGM__SEDFR_JF constructor here, but the variable was never used, so I removed it. 
        // CGM__SEDFR_JF cs = new CGM__SEDFR_JF();
        
// m20150711_load_global_variables constructor mostly initializes boilerplate objects. 
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        lgvariables.setup();

        Load loaddata = new Load(DIAS.excelSubdirectory);
        try {
            lgvariables.kj = (int) (loaddata.loaddouble("kj") + 1);
            
            if (DIAS.verboseMode) { 
                System.out.println(lgvariables.kj + "     lgvariables.kj");
            } 

            Matrix foo = lgvariables.basal_insulin; 
            
            lgvariables.basal_insulin = DIAS.createnewMatrix(8, lgvariables.kj, loaddata.load(lgvariables.basal_insulin, "basal_insulin"));

            if (DIAS.verboseMode) { 
                DIAS.printMatrix(lgvariables.basal_insulin, "lgvariables.basal_insulin");
            } 

            lgvariables.bolus_insulin = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.bolus_insulin);
            lgvariables.ee = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.ee);
            lgvariables.phys_act = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.phys_act);
            lgvariables.sleep = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.sleep);
            lgvariables.gsr = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.gsr);
            lgvariables.IOB_total = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.IOB_total);
            lgvariables.meal_states = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.meal_states);
            lgvariables.meal_bolus_amount = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_bolus_amount);
            lgvariables.meal_detection = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_detection);
            lgvariables.meal_detection_time = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_detection_time);
            lgvariables.correction_bolus_amount = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_bolus_amount);
            lgvariables.correction_detection = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_detection);
            lgvariables.correction_detection_time = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_detection_time);
            lgvariables.correction_limit = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_limit);
            lgvariables.meal_g_basal = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_g_basal);
            lgvariables.meal_gpc_gs_slope_degree = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_gpc_gs_slope_degree);
            lgvariables.meal_gpc_mu = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_gpc_mu);
            lgvariables.phi = DIAS.createnewMatrix(24, 21, lgvariables.phi);
            lgvariables.phi_ee = DIAS.createnewMatrix(4, 21, lgvariables.phi_ee);
            lgvariables.phi_gsr = DIAS.createnewMatrix(4, 21, lgvariables.phi_gsr);
            lgvariables.armax_parameters = DIAS.createnewMatrix(24, lgvariables.kj, lgvariables.armax_parameters);
            lgvariables.armax_lamda = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.armax_lamda);
            lgvariables.armax_err = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.armax_err);
            lgvariables.arma_parameters_ee = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.arma_parameters_ee);
            lgvariables.arma_parameters_gsr = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.arma_parameters_gsr);
            lgvariables.arma_lamda_ee = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_lamda_ee);
            lgvariables.arma_err_ee = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_err_ee);
            lgvariables.arma_parameters_gsr = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.arma_parameters_gsr);
            lgvariables.arma_lamda_gsr = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_lamda_gsr);
            lgvariables.arma_err_gsr = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_err_gsr);
            lgvariables.X_state = DIAS.createnewMatrix(21, lgvariables.kj, lgvariables.X_state);
            lgvariables.X_state_ee = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.X_state_ee);
            lgvariables.X_state_gsr = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.X_state_gsr);
            lgvariables.ee_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.ee_prediction);
            lgvariables.gsr_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.gsr_prediction);
            lgvariables.g_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.g_prediction);
            lgvariables.reference_glucose = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.reference_glucose);
            lgvariables.insulin_sensitivity_constant = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.insulin_sensitivity_constant);
            lgvariables.IOB_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.IOB_prediction);
            lgvariables.maximum_insulin = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.maximum_insulin);
            lgvariables.total_daily_unit = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.total_daily_unit);
            lgvariables.insulin_sensitivity_factor = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.insulin_sensitivity_factor);
            lgvariables.hypo_threshold = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_threshold);
            lgvariables.hypo_slope_degree = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_slope_degree);
            lgvariables.hypo_alarm = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_alarm);
            lgvariables.hypo_phase = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_phase);
            lgvariables.hypo_phase_old = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_phase_old);
            lgvariables.repeated_immediate_alarm = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.repeated_immediate_alarm);
            lgvariables.bolus_insulin_calculated = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.bolus_insulin_calculated);
            lgvariables.basal_insulin_calculated = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.basal_insulin_calculated);
            lgvariables.gs = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.gs);

            lgvariables.basal_insulin = loaddata.load(lgvariables.basal_insulin, "basal_insulin");
            lgvariables.bolus_insulin = loaddata.load(lgvariables.bolus_insulin, "bolus_insulin");
            lgvariables.ee = loaddata.load(lgvariables.ee, "ee");
            lgvariables.phys_act = loaddata.load(lgvariables.phys_act, "phys_act");
            lgvariables.sleep = loaddata.load(lgvariables.sleep, "sleep");
            lgvariables.gsr = loaddata.load(lgvariables.gsr, "gsr");
            lgvariables.IOB_total = loaddata.load(lgvariables.IOB_total, "IOB_total");
            lgvariables.meal_states = loaddata.load(lgvariables.meal_states, "meal_states");
            lgvariables.meal_bolus_amount = loaddata.load(lgvariables.meal_bolus_amount, "meal_bolus_amount");
            lgvariables.meal_detection = loaddata.load(lgvariables.meal_detection, "meal_detection");
            lgvariables.meal_detection_time = loaddata.load(lgvariables.meal_detection_time, "meal_detection_time");
            lgvariables.correction_bolus_amount = loaddata.load(lgvariables.correction_bolus_amount, "correction_bolus_amount");
            lgvariables.correction_detection = loaddata.load(lgvariables.correction_detection, "correction_detection");
            lgvariables.correction_detection_time = loaddata.load(lgvariables.correction_detection_time, "correction_detection_time");
            lgvariables.correction_limit = loaddata.load(lgvariables.correction_limit, "correction_limit");
            lgvariables.meal_g_basal = loaddata.load(lgvariables.meal_g_basal, "meal_g_basal");
            lgvariables.meal_gpc_gs_slope_degree = loaddata.load(lgvariables.meal_gpc_gs_slope_degree, "meal_gpc_gs_slope_degree");
            lgvariables.meal_gpc_mu = loaddata.load(lgvariables.meal_gpc_mu, "meal_gpc_mu");
            lgvariables.phi = loaddata.load(lgvariables.phi, "phi");
            lgvariables.phi_ee = loaddata.load(lgvariables.phi_ee, "phi_ee");
            lgvariables.phi_gsr = loaddata.load(lgvariables.phi_gsr, "phi_gsr");
            lgvariables.armax_parameters = loaddata.load(lgvariables.armax_parameters, "armax_parameters");
            lgvariables.armax_lamda = loaddata.load(lgvariables.armax_lamda, "armax_lamda");
            lgvariables.armax_err = loaddata.load(lgvariables.armax_err, "armax_err");
            lgvariables.arma_parameters_ee = loaddata.load(lgvariables.arma_parameters_ee, "arma_parameters_ee");
            lgvariables.arma_lamda_ee = loaddata.load(lgvariables.arma_lamda_ee, "arma_lamda_ee");
            lgvariables.arma_err_ee = loaddata.load(lgvariables.arma_err_ee, "arma_err_ee");
            lgvariables.arma_parameters_gsr = loaddata.load(lgvariables.arma_parameters_gsr, "arma_parameters_gsr");
            lgvariables.arma_lamda_gsr = loaddata.load(lgvariables.arma_lamda_gsr, "arma_lamda_gsr");
            lgvariables.arma_err_gsr = loaddata.load(lgvariables.arma_err_gsr, "arma_err_gsr");
            lgvariables.X_state = loaddata.load(lgvariables.X_state, "X_state");
            lgvariables.X_state_ee = loaddata.load(lgvariables.X_state_ee, "X_state_ee");
            lgvariables.X_state_gsr = loaddata.load(lgvariables.X_state_gsr, "X_state_gsr");
            lgvariables.ee_prediction = loaddata.load(lgvariables.ee_prediction, "ee_prediction");
            lgvariables.gsr_prediction = loaddata.load(lgvariables.gsr_prediction, "gsr_prediction");
            lgvariables.g_prediction = loaddata.load(lgvariables.g_prediction, "g_prediction");
            lgvariables.reference_glucose = loaddata.load(lgvariables.reference_glucose, "reference_glucose");
            lgvariables.insulin_sensitivity_constant = loaddata.load(lgvariables.insulin_sensitivity_constant, "insulin_sensitivity_constant");
            lgvariables.IOB_prediction = loaddata.load(lgvariables.IOB_prediction, "IOB_prediction");
            lgvariables.maximum_insulin = loaddata.load(lgvariables.maximum_insulin, "maximum_insulin");
            lgvariables.total_daily_unit = loaddata.load(lgvariables.total_daily_unit, "total_daily_unit");
            lgvariables.insulin_sensitivity_factor = loaddata.load(lgvariables.insulin_sensitivity_factor, "insulin_sensitivity_factor");
            lgvariables.hypo_threshold = loaddata.load(lgvariables.hypo_threshold, "hypo_threshold");
            lgvariables.hypo_slope_degree = loaddata.load(lgvariables.hypo_slope_degree, "hypo_slope_degree");
            lgvariables.hypo_alarm = loaddata.load(lgvariables.hypo_alarm, "hypo_alarm");
            lgvariables.hypo_phase = loaddata.load(lgvariables.hypo_phase, "hypo_phase");
            lgvariables.hypo_phase_old = loaddata.load(lgvariables.hypo_phase_old, "hypo_phase_old");
            lgvariables.repeated_immediate_alarm = loaddata.load(lgvariables.repeated_immediate_alarm, "repeated_immediate_alarm");
            lgvariables.bolus_insulin_calculated = loaddata.load(lgvariables.bolus_insulin_calculated, "bolus_insulin_calculated");
            lgvariables.basal_insulin_calculated = loaddata.load(lgvariables.basal_insulin_calculated, "basal_insulin_calculated");
            lgvariables.gs = loaddata.load(lgvariables.gs, "gs");

            lgvariables.CGM_retuning_with_noise_generator = loaddata.loaddouble("CGM_retuning_with_noise_generator");
            lgvariables.CGM_retuning_without_noise_generator = loaddata.loaddouble("CGM_retuning_without_noise_generator");
            lgvariables.body_weight = loaddata.loaddouble("body_weight");

            m20150711_gpc gpc = new m20150711_gpc();

            lgvariables.meal_covariance = gpc.createnew3Dmatrix(lgvariables.meal_covariance, 8, 8, lgvariables.kj);
            lgvariables.armax_covariance = gpc.createnew3Dmatrix(lgvariables.armax_covariance, 24, 24, lgvariables.kj);
            lgvariables.arma_covariance_ee = gpc.createnew3Dmatrix(lgvariables.arma_covariance_ee, 4, 4, lgvariables.kj);
            lgvariables.arma_covariance_gsr = gpc.createnew3Dmatrix(lgvariables.arma_covariance_gsr, 4, 4, lgvariables.kj);
            lgvariables.A_state = gpc.createnew3Dmatrix(lgvariables.A_state, 22, 24, lgvariables.kj);
            lgvariables.A_state_ee = gpc.createnew3Dmatrix(lgvariables.A_state_ee, 4, 4, lgvariables.kj);
            lgvariables.A_state_gsr = gpc.createnew3Dmatrix(lgvariables.A_state_gsr, 4, 4, lgvariables.kj);
            lgvariables.C_state = gpc.createnew3Dmatrix(lgvariables.C_state, 1, 22, lgvariables.kj);
            lgvariables.C_state_ee = gpc.createnew3Dmatrix(lgvariables.C_state_ee, 1, 4, lgvariables.kj);
            lgvariables.C_state_gsr = gpc.createnew3Dmatrix(lgvariables.C_state_gsr, 1, 4, lgvariables.kj);
            lgvariables.B_state = gpc.createnew3Dmatrix(lgvariables.B_state, 21, 3, lgvariables.kj);
            lgvariables.K_state = gpc.createnew3Dmatrix(lgvariables.K_state, 21, 1, lgvariables.kj);
            lgvariables.K_state_ee = gpc.createnew3Dmatrix(lgvariables.K_state_ee, 4, 1, lgvariables.kj);
            lgvariables.K_state_gsr = gpc.createnew3Dmatrix(lgvariables.K_state_gsr, 4, 1, lgvariables.kj);
            lgvariables.M = gpc.createnew3Dmatrix(lgvariables.M, 8, 21, lgvariables.kj);
            lgvariables.M_ee = gpc.createnew3Dmatrix(lgvariables.M_ee, 8, 4, lgvariables.kj);
            lgvariables.M_gsr = gpc.createnew3Dmatrix(lgvariables.M_gsr, 8, 4, lgvariables.kj);
            lgvariables.L = gpc.createnew3Dmatrix(lgvariables.L, 8, 8, lgvariables.kj);
            lgvariables.L_ee = gpc.createnew3Dmatrix(lgvariables.L_ee, 8, 8, lgvariables.kj);
            lgvariables.L_gsr = gpc.createnew3Dmatrix(lgvariables.L_gsr, 8, 8, lgvariables.kj);

            DIAS.print3DMatrix(lgvariables.meal_covariance, "lgvariables.meal_covariance");
            DIAS.printMatrix(lgvariables.meal_states, "lgvariables.meal_states");

            lgvariables.meal_covariance = loaddata.load3D(lgvariables.meal_covariance, "meal_covariance", lgvariables.kj);
            lgvariables.armax_covariance = loaddata.load3D(lgvariables.armax_covariance, "armax_covariance", lgvariables.kj);
            lgvariables.arma_covariance_ee = loaddata.load3D(lgvariables.arma_covariance_ee, "arma_covariance_ee", lgvariables.kj);
            lgvariables.arma_covariance_gsr = loaddata.load3D(lgvariables.arma_covariance_gsr, "arma_covariance_gsr", lgvariables.kj);
            lgvariables.A_state = loaddata.load3D(lgvariables.A_state, "A_state", lgvariables.kj);
            lgvariables.A_state_ee = loaddata.load3D(lgvariables.A_state_ee, "A_state_ee", lgvariables.kj);
            lgvariables.A_state_gsr = loaddata.load3D(lgvariables.A_state_gsr, "A_state_gsr", lgvariables.kj);
            lgvariables.C_state = loaddata.load3D(lgvariables.C_state, "C_state", lgvariables.kj);
            lgvariables.C_state_ee = loaddata.load3D(lgvariables.C_state_ee, "C_state_ee", lgvariables.kj);
            lgvariables.C_state_gsr = loaddata.load3D(lgvariables.C_state_gsr, "C_state_gsr", lgvariables.kj);
            lgvariables.B_state = loaddata.load3D(lgvariables.B_state, "B_state", lgvariables.kj);
            lgvariables.K_state = loaddata.load3D(lgvariables.K_state, "K_state", lgvariables.kj);
            lgvariables.K_state_ee = loaddata.load3D(lgvariables.K_state_ee, "K_state_ee", lgvariables.kj);
            lgvariables.K_state_gsr = loaddata.load3D(lgvariables.K_state_gsr, "K_state_gsr", lgvariables.kj);
            lgvariables.M = loaddata.load3D(lgvariables.M, "M", lgvariables.kj);
            lgvariables.M_ee = loaddata.load3D(lgvariables.M_ee, "M_ee", lgvariables.kj);
            lgvariables.M_gsr = loaddata.load3D(lgvariables.M_gsr, "M_gsr", lgvariables.kj);
            lgvariables.L = loaddata.load3D(lgvariables.L, "L", lgvariables.kj);
            lgvariables.L_ee = loaddata.load3D(lgvariables.L_ee, "L_ee", lgvariables.kj);
            lgvariables.L_gsr = loaddata.load3D(lgvariables.L_gsr, "L_gsr", lgvariables.kj);

            lgvariables.carb_amount = loaddata.loadString("carb_amount", lgvariables.kj);
            lgvariables.carb_type = loaddata.loadString("carb_type", lgvariables.kj);
            lgvariables.batch_CL = loaddata.loadString("batch_CL", lgvariables.kj);

            DIAS.print3DMatrix(lgvariables.meal_covariance, "lgvariables.meal_covariance");
            DIAS.printMatrix(lgvariables.meal_states, "lgvariables.meal_states");

            lgvariables.kj = lgvariables.kj - 1;

        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_LoadButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        // m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        // lgvariables.gs_in=Double.parseDouble (jTextField1.getText());

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
        //  m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        // lgvariables.ee_in=Double.parseDouble (jTextField1.getText());

    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
        //  m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        //  lgvariables.ee_in=Double.parseDouble (jTextField1.getText());

    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    /** 
     * Updates the lgvariables (m20150711_load_global_variables) static properties : 
     * gs_in, ee_in, gsr_in, sleep_in, phys_act_in, body_weight
     * 
     * @param evt ActionEvent from the action button
     */
    private void GetInputsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetInputsButtonActionPerformed
        // Load global variables
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        lgvariables.gs_in = Double.parseDouble(jTextField1.getText());
        lgvariables.ee_in = Double.parseDouble(jTextField2.getText());
        lgvariables.gsr_in = Double.parseDouble(jTextField3.getText());
        lgvariables.sleep_in = Double.parseDouble(jTextField4.getText());
        lgvariables.phys_act_in = Double.parseDouble(jTextField5.getText());
        lgvariables.body_weight = Double.parseDouble(jTextField6.getText());

        lgvariables.setup();
    }//GEN-LAST:event_GetInputsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearHistoryButton;
    private javax.swing.JButton GetInputsButton;
    private javax.swing.JButton LoadButton;
    private javax.swing.JButton RunInput;
    private javax.swing.JButton SaveButton;
    private javax.swing.JLabel jBasalLabel;
    public static javax.swing.JLabel jBasalValue;
    private javax.swing.JLabel jBolusLabel;
    public static javax.swing.JLabel jBolusValue;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
