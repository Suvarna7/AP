/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dias;

import Jama.Matrix;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane; 
import dias.MemoryStaticVariables.*;
/**
 *
 * @author Mert
 */
public class GUI extends javax.swing.JFrame {
    
    //an instance of the GUI has its own vcgm that it uses. 
    // No other class directly uses this VirtualCgm class, so it's OK to assume that this one holds all the values necessary to run the algorithm. 
    private VirtualCgm vcgm; 

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        
        this.RunInput.setEnabled(false);
        //set up default values based on configuration file
        jTextField_GS_In.setText(Double.toString(DIAS.gs_initial));
        jTextField_EE_In.setText(Double.toString(DIAS.ee_in)); 
        jTextField_GSR_In.setText(Double.toString(DIAS.gsr_in)); 
        jTextField_Sleep_In.setText(Double.toString(DIAS.sleep_in)); 
        JTextField_Phys_Act_In.setText(Double.toString(DIAS.phys_act_in)); 
        jTextField_Body_Weight.setText(Double.toString(DIAS.body_weight)); 
        
        //initially, use the default DIAS kj_start value for both the start and end kj values. 
        this.jTextField_kj_from.setText(Integer.toString(DIAS.kj_start)); 
        this.jTextField_kj_to.setText(Integer.toString(DIAS.kj_start)); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RunInput = new javax.swing.JButton();
        ClearHistoryButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        LoadButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField_GS_In = new javax.swing.JTextField();
        jTextField_EE_In = new javax.swing.JTextField();
        jTextField_GSR_In = new javax.swing.JTextField();
        jTextField_Sleep_In = new javax.swing.JTextField();
        JTextField_Phys_Act_In = new javax.swing.JTextField();
        jTextField_Body_Weight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        GetInputsButton = new javax.swing.JButton();
        jBolusLabel = new javax.swing.JLabel();
        jBasalLabel = new javax.swing.JLabel();
        jBolusValue = new javax.swing.JLabel();
        jBasalValue = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel_kj_display = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel_cgm_display = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jTextField_kj_from = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField_kj_to = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        RunInput.setText("Run");
        RunInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunInputActionPerformed(evt);
            }
        });

        ClearHistoryButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ClearHistoryButton.setForeground(new java.awt.Color(255, 0, 0));
        ClearHistoryButton.setText("Clear History");
        ClearHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearHistoryButtonActionPerformed(evt);
            }
        });

        jButton3.setText("(No)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SaveButton.setForeground(new java.awt.Color(255, 0, 51));
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        LoadButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LoadButton.setForeground(new java.awt.Color(255, 0, 51));
        LoadButton.setText("Load");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("CLEAR HISTORY & SAVE-LOAD");

        jTextField_GS_In.setText("185");
        jTextField_GS_In.setToolTipText("");
        jTextField_GS_In.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_GS_InActionPerformed(evt);
            }
        });

        jTextField_EE_In.setText("0.3");
        jTextField_EE_In.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_EE_InActionPerformed(evt);
            }
        });

        jTextField_GSR_In.setText("0.2");
        jTextField_GSR_In.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_GSR_InActionPerformed(evt);
            }
        });

        jTextField_Sleep_In.setText("0");
        jTextField_Sleep_In.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_Sleep_InActionPerformed(evt);
            }
        });

        JTextField_Phys_Act_In.setText("0");
        JTextField_Phys_Act_In.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextField_Phys_Act_InActionPerformed(evt);
            }
        });

        jTextField_Body_Weight.setText("85");
        jTextField_Body_Weight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_Body_WeightActionPerformed(evt);
            }
        });

        jLabel2.setText("Gs_in");

        jLabel3.setText("Ee_in");

        jLabel4.setText("Gsr_in");

        jLabel5.setText("Sleep_in");

        jLabel6.setText("Phys_act_in");

        jLabel7.setText("Body_weight");

        GetInputsButton.setText("GetInputs");
        GetInputsButton.setToolTipText("");
        GetInputsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetInputsButtonActionPerformed(evt);
            }
        });

        jBolusLabel.setText("Bolus Insulin:");

        jBasalLabel.setText("Basal Insulin:");

        jBolusValue.setText("0");

        jBasalValue.setText("0");

        jLabel8.setText("Current KJ value");

        jLabel_kj_display.setText("_______");

        jLabel9.setText("Current CGM value");

        jLabel_cgm_display.setText("_______");

        jLabel10.setText("From KJ");

        jTextField_kj_from.setText("jTextField7");

        jLabel11.setText("to");

        jTextField_kj_to.setText("jTextField7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_kj_from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_kj_to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(123, 123, 123))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RunInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(ClearHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LoadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBasalLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBasalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBolusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBolusValue, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_Sleep_In, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JTextField_Phys_Act_In, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_Body_Weight, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(254, 254, 254)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel_kj_display))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel_cgm_display)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4)))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField_EE_In, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_GS_In, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField_GSR_In, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(323, 323, 323)
                                .addComponent(GetInputsButton)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(0, 443, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextField_kj_from, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jTextField_kj_to, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClearHistoryButton)
                    .addComponent(SaveButton)
                    .addComponent(LoadButton)
                    .addComponent(RunInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_GS_In, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_EE_In, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBolusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBolusValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBasalLabel)
                            .addComponent(jBasalValue))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_GSR_In, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField_Sleep_In, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(JTextField_Phys_Act_In, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jTextField_Body_Weight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addComponent(GetInputsButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel_kj_display))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel_cgm_display))))
                .addGap(74, 74, 74))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Triggered by hitting the "run" button. Gets initial values from UI, disables input fields, and runs the main process itself. 
     * Meant for single-run interaction. 
     *
     * @param evt
     */
    private void RunInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunInputActionPerformed

        GetInitialValuesFromUI(); 
        
        DisableInputFields(); 
        
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        //XXX OPTIMIZE : We should never get here without either loading Excel data into lgvariables or pulling GUI data for initial condition, and incidentally setting up lgvariables. My dumb solution for now is to disable the "run" button until we've done either of those, but we should really check lgvariables and exit this function with a warning if nothing has been set up. 
        
        int i_start = this.GetUIValue_KJ_From(); 
        int i_end = this.GetUIValue_KJ_To(); 
        for (int i = i_start; i <= i_end; i++) { 
            RefreshKJValues(lgvariables, this.GetUIValue_KJ_From(), this.GetUIValue_KJ_To(), false);
            RunMainProcess(lgvariables); 
        }
        
    }//GEN-LAST:event_RunInputActionPerformed

    /** 
     * Runs the optimizer and prediction algorithm based on current inputs. 
     * Responsible for getting its own inputs, running the optimizer, etc. 
     * Previously, this was inside the RunInputActionPerformed() method, but we're breaking it out here so we can call it with other triggers. 
     */
    private void RunMainProcess(m20150711_load_global_variables lgvariables) { 

        //Virtual CGM generator:
        // Have we built a VirtualCgm object already? If not, build one. This will bang out our necessary initial value(s) from the UI. 
        if (vcgm == null) { 
            vcgm = new VirtualCgm(DIAS.gs_initial);
        } 
        UpdateKJLabel(m20150711_load_global_variables.kj, this);
        // XXX OPTIMIZE : note that we increment kj right away. 
        m20150711_load_global_variables.kj++;
        
        vcgm.generateVirtualCGMValues(m20150711_load_global_variables.kj, m20150711_load_global_variables.gs_in); 
        m20150711_load_global_variables.gs = vcgm.gstemp;  
        UpdateCGMLabel(lgvariables.gs.get(0, lgvariables.kj - 1), this); 

        int flag_noise = 1;

        if (m20150711_load_global_variables.kj > 20) {
            //initialize insulin bolus as empty matrix
            m20150711_load_global_variables.bolus_insulin = DIAS.createnewMatrix(m20150711_load_global_variables.kj,
                    1, m20150711_load_global_variables.bolus_insulin);
        }

        if (m20150711_load_global_variables.kj > 20) {
            m20150711_load_global_variables.basal_insulin = DIAS.createnewMatrix(8, 
                    m20150711_load_global_variables.kj, m20150711_load_global_variables.basal_insulin);
        }

        /* CGM__SEDFR_JF csedfrJF = new CGM__SEDFR_JF(vcgm.gstemp,lgvariables.bolus_insulin,lgvariables.basal_insulin,flag_noise);
        try {
         lgvariables.CGM_retuning_with_noise_generator =csedfrJF.CGM();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
     flag_noise=0;
     
     csedfrJF = new CGM__SEDFR_JF(vcgm.gstemp,lgvariables.bolus_insulin,lgvariables.basal_insulin,flag_noise);
        try {
         lgvariables.CGM_retuning_without_noise_generator =csedfrJF.CGM();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }   */
        m20150711_load_global_variables.ee = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.ee.getColumnDimension() + 1, 
                m20150711_load_global_variables.ee);
        m20150711_load_global_variables.gsr = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.gsr.getColumnDimension() + 1, 
                m20150711_load_global_variables.gsr);
        m20150711_load_global_variables.sleep = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.sleep.getColumnDimension() + 1, 
                m20150711_load_global_variables.sleep);
        m20150711_load_global_variables.phys_act = DIAS.createnewMatrix(1, 
                m20150711_load_global_variables.phys_act.getColumnDimension() + 1, 
                m20150711_load_global_variables.phys_act);

        m20150711_get_armband_data getarmbanddata = new m20150711_get_armband_data(m20150711_load_global_variables.ee, 
                m20150711_load_global_variables.gsr, m20150711_load_global_variables.sleep, m20150711_load_global_variables.phys_act);
        m20150711_load_global_variables.armband_data_with_time = getarmbanddata.m20150711_get_armband_data();
        m20150711_load_global_variables.ee.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.eedouble);
        m20150711_load_global_variables.gsr.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.gsrdouble);
        m20150711_load_global_variables.sleep.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.sleepdouble);
        m20150711_load_global_variables.phys_act.set(0, m20150711_load_global_variables.kj, m20150711_get_armband_data.phys_actdouble);

        Matrix basal_temp = new Matrix(1, m20150711_load_global_variables.basal_insulin.getColumnDimension());

        for (int i = 0; i < m20150711_load_global_variables.basal_insulin.getColumnDimension(); i++) {
            basal_temp.set(0, i, m20150711_load_global_variables.basal_insulin.get(0, i));
        }

        /*     ///////////////////////////////////////INPUTS IOB_CALCULATE///////////////////////////////////////////////////////////////////////////////
               System.out.println("////////////////////////INPUTS IOB_CALC////////////////////////////////////////////////////////////////////////////");
               cs.printMatrix(lgvariables.bolus_insulin,"lgvariables.bolus_insulin");
               cs.printMatrix(basal_temp,"basal_temp");
               System.out.println("////////////////////////INPUTS IOB_CALC////////////////////////////////////////////////////////////////////////////");*/
       //IOB  module - calculate insulin on board
        m20150711_calculate_IOB IOBcalculate = new m20150711_calculate_IOB(m20150711_load_global_variables.bolus_insulin, basal_temp);
        m20150711_load_global_variables.IOB_total = DIAS.createnewMatrix(m20150711_load_global_variables.kj + 1,
                1, m20150711_load_global_variables.IOB_total);
        m20150711_load_global_variables.IOB_total.set(m20150711_load_global_variables.kj, 0, IOBcalculate.IOB());

        /*    /////////////////////////////////OUTPUTS IOB_CALCULATE////////////////////////////////////////////////////////////////////////////////////
               System.out.println("////////////////////////OUTPUT IOB_CALC////////////////////////////////////////////////////////////////////////////");
               cs.printMatrix(lgvariables.IOB_total," lgvariables.IOB_total");
               System.out.println("////////////////////////OUTPUT IOB_CALC////////////////////////////////////////////////////////////////////////////");
               ////////////////////////////////OUTPUTS IOB_CALCULATE////////////////////////////////////////////////////////////////////////////////////*/
       //TODO Meal detection:
       // CGM values - from gstemp
        m20150711_run_meal_detection_bolus_algorithm rmdetectionbolusalgorithm = new m20150711_run_meal_detection_bolus_algorithm(lgvariables.meal_states, lgvariables.meal_covariance, lgvariables.bolus_insulin, lgvariables.meal_bolus_amount, lgvariables.meal_detection, lgvariables.meal_detection_time, lgvariables.correction_bolus_amount, lgvariables.correction_detection, lgvariables.correction_detection_time, lgvariables.correction_limit, lgvariables.gs, lgvariables.kj, lgvariables.meal_g_basal, lgvariables.meal_gpc_gs_slope_degree, lgvariables.meal_gpc_mu, lgvariables.sleep, lgvariables.phys_act, lgvariables.IOB_total, lgvariables.body_weight);
        rmdetectionbolusalgorithm.run_meal_detection_bolus_algorithm();

        //TODO GPC 
        // CGM values - from gstemp
        Matrix matrixGPC = new Matrix(8, 1);
        m20150711_gpc m_gpc = new m20150711_gpc(lgvariables.gs, lgvariables.ee, lgvariables.gsr, lgvariables.kj, lgvariables.phi, lgvariables.phi_ee, lgvariables.phi_gsr, lgvariables.armax_parameters, lgvariables.armax_covariance, lgvariables.armax_lamda, lgvariables.armax_err, lgvariables.arma_parameters_ee, lgvariables.arma_lamda_ee, lgvariables.arma_covariance_ee, lgvariables.arma_err_ee, lgvariables.arma_parameters_gsr, lgvariables.arma_lamda_gsr, lgvariables.arma_covariance_gsr, lgvariables.arma_err_gsr, lgvariables.A_state, lgvariables.A_state_ee, lgvariables.A_state_gsr, lgvariables.C_state, lgvariables.C_state_ee, lgvariables.C_state_gsr, lgvariables.B_state, lgvariables.K_state, lgvariables.K_state_ee, lgvariables.K_state_gsr, lgvariables.M, lgvariables.L, lgvariables.L_ee, lgvariables.L_gsr, lgvariables.M_ee, lgvariables.M_gsr, lgvariables.X_state, lgvariables.X_state_ee, lgvariables.X_state_gsr, lgvariables.ee_prediction, lgvariables.gsr_prediction, lgvariables.g_prediction, lgvariables.reference_glucose, lgvariables.insulin_sensitivity_constant, lgvariables.basal_insulin, lgvariables.IOB_prediction, lgvariables.maximum_insulin, lgvariables.total_daily_unit, lgvariables.insulin_sensitivity_factor, lgvariables.body_weight, lgvariables.meal_gpc_mu, lgvariables.bolus_insulin, 0, matrixGPC);
        m_gpc.gpc();

        //TODO CPA module
        // CGM values - from gstemp

        CPA_Module_paralleled_calculation_JF CPA_module_paralleled_cal = new CPA_Module_paralleled_calculation_JF(lgvariables.gs, lgvariables.ee, lgvariables.gsr, lgvariables.kj, lgvariables.phi, lgvariables.phi_ee, lgvariables.phi_gsr, lgvariables.armax_parameters, lgvariables.armax_covariance, lgvariables.armax_lamda, lgvariables.armax_err, lgvariables.arma_parameters_ee, lgvariables.arma_lamda_ee, lgvariables.arma_covariance_ee, lgvariables.arma_err_ee, lgvariables.arma_parameters_gsr, lgvariables.arma_lamda_gsr, lgvariables.arma_covariance_gsr, lgvariables.arma_err_gsr, lgvariables.A_state, lgvariables.A_state_ee, lgvariables.A_state_gsr, lgvariables.C_state, lgvariables.C_state_ee, lgvariables.C_state_gsr, lgvariables.B_state, lgvariables.K_state, lgvariables.K_state_ee, lgvariables.K_state_gsr, lgvariables.M, lgvariables.L, lgvariables.L_ee, lgvariables.L_gsr, lgvariables.M_ee, lgvariables.M_gsr, lgvariables.X_state, lgvariables.X_state_ee, lgvariables.X_state_gsr, lgvariables.ee_prediction, lgvariables.gsr_prediction, lgvariables.g_prediction, lgvariables.reference_glucose, lgvariables.insulin_sensitivity_constant, lgvariables.basal_insulin, lgvariables.IOB_prediction, lgvariables.maximum_insulin, lgvariables.total_daily_unit, lgvariables.insulin_sensitivity_factor, lgvariables.body_weight, lgvariables.meal_gpc_mu, lgvariables.bolus_insulin);
        try {
            CPA_module_paralleled_cal.CPA();
        } catch (Exception ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Hypo glucemia alarm calculator
        // CGM values - from gstemp
        hypo_alarm hypo = new hypo_alarm(lgvariables.hypo_threshold.transpose(), lgvariables.hypo_slope_degree.transpose(), lgvariables.hypo_alarm.transpose(), lgvariables.carb_amount, lgvariables.carb_type, lgvariables.hypo_phase.transpose(), lgvariables.hypo_phase_old.transpose(), lgvariables.repeated_immediate_alarm.transpose(), lgvariables.gs, lgvariables.kj, lgvariables.g_prediction, lgvariables.phys_act, lgvariables.sleep);
        hypo.m20150711_hypo_alarm();

        if (lgvariables.phys_act.get(0, lgvariables.kj - 1) == 1) {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Exercise";
        } else if (lgvariables.sleep.get(0, lgvariables.kj - 1) == 1) {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Sleep";
        } else if (lgvariables.meal_detection.get(lgvariables.kj - 1, 0) == 1) {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Meal";
        } else {
            lgvariables.batch_CL[lgvariables.kj - 1] = "Other";
        }

        lgvariables.batch_CL = hypo.createnewString(lgvariables.kj + 1, lgvariables.batch_CL);
        lgvariables.basal_insulin_calculated = DIAS.createnewMatrix(8, lgvariables.basal_insulin.getColumnDimension() + 1, lgvariables.basal_insulin_calculated);
        lgvariables.bolus_insulin_calculated = DIAS.createnewMatrix(lgvariables.bolus_insulin.getRowDimension() + 1, 1, lgvariables.bolus_insulin_calculated);
        lgvariables.basal_insulin_calculated = lgvariables.basal_insulin;
        lgvariables.bolus_insulin_calculated = lgvariables.bolus_insulin;

        /*       if (lgvariables.hypo_alarm.get(lgvariables.kj,0)==1 && lgvariables.hypo_phase.get(lgvariables.kj,0)==5 && lgvariables.repeated_immediate_alarm.get(lgvariables.kj,0)==0){
        send_text_message stm = new send_text_message ("mertsevil1991@gmail.com", "mertsevil1991@hotmail.com", "Immediate Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of,  "+lgvariables.carb_type[lgvariables.kj],"Immediate Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of,  "+lgvariables.carb_type[lgvariables.kj]);
        try { 
            stm.generateAndSendEmail();
        } catch (MessagingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
          }
    else if (lgvariables.hypo_alarm.get(lgvariables.kj,0)==1 && lgvariables.hypo_phase.get(lgvariables.kj,0)==5 && lgvariables.repeated_immediate_alarm.get(lgvariables.kj,0)==1){
        send_text_message stm = new send_text_message ("mertsevil1991@gmail.com", "mertsevil1991@hotmail.com", "Immediate Alarm: This carb may not be needed. Confirm with subject or MD,Consume "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj],"Immediate Alarm: This carb may not be needed. Confirm with subject or MD,Consume "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj]);
        try { 
            stm.generateAndSendEmail();
        } catch (MessagingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         }
    else if (lgvariables.hypo_alarm.get(lgvariables.kj,0)==1 && lgvariables.hypo_phase.get(lgvariables.kj,0)<5){
    send_text_message stm = new send_text_message ("mertsevil1991@gmail.com", "mertsevil1991@hotmail.com", "Early Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj],"Early Alarm: Consume  "+lgvariables.carb_amount[lgvariables.kj]+"grams of "+lgvariables.carb_type[lgvariables.kj]);
        try { 
            stm.generateAndSendEmail();
        } catch (MessagingException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
         }*/
        SaveAllData saveall = new SaveAllData();
        saveall.saveall();

        //////////////////////////OUTPUTS///////////////////////////////////////////////////////////////////////////////////////////////////////////
        System.out.println("Kj: " + m20150711_load_global_variables.kj);
        if (DIAS.verboseMode) { DIAS.printMatrix(m20150711_load_global_variables.gs, "lgvariables.gs"); } 
        if (DIAS.verboseMode) { DIAS.printMatrix(m20150711_load_global_variables.bolus_insulin, "lgvariables.bolus_insulin"); }
        if (DIAS.verboseMode) { DIAS.printMatrix(m20150711_load_global_variables.basal_insulin, "lgvariables.basal_insulin"); }
        if (DIAS.verboseMode) { DIAS.printMatrix(m20150711_load_global_variables.bolus_insulin_calculated, "lgvariables.bolus_insulin_calculated"); }
        if (DIAS.verboseMode) { DIAS.printMatrix(m20150711_load_global_variables.basal_insulin_calculated, "lgvariables.basal_insulin_calculated"); }
        //XXX OPTIMIZE Update output values in GUI. The KJ values in the UI also control which KJ values to use next time we run this function, if we're in a loop. 
        Integer kj_to_temp = Math.max(this.GetUIValue_KJ_To(), lgvariables.kj); 
        RefreshKJValues(lgvariables, lgvariables.kj , kj_to_temp, false);
        //NB : MATLAB code sends bolus_insulin_calculated and basal_insulin (not the calculated version) to the GUI. 
        jBolusValue.setText(new java.text.DecimalFormat("0.0####").format(m20150711_load_global_variables.bolus_insulin_calculated.get(m20150711_load_global_variables.kj, 0))); 
        jBasalValue.setText(new java.text.DecimalFormat("0.0####").format(m20150711_load_global_variables.basal_insulin.get(0, m20150711_load_global_variables.kj))); 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    }
    
    private void ClearHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearHistoryButtonActionPerformed
        // TODO add your handling code here:
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        lgvariables.setup(DIAS.kj_start); //set kj back to default start value. 
        this.jTextField_kj_from.setText(Integer.toString((int)DIAS.kj_start)); 
        this.jTextField_kj_to.setText(Integer.toString((int)DIAS.kj_start));
    }//GEN-LAST:event_ClearHistoryButtonActionPerformed

    private void DisableInputFields() { 
        jTextField_GS_In.setEditable(false);
        jTextField_GS_In.setEnabled(false); 
        jTextField_EE_In.setEditable(false);
        jTextField_EE_In.setEnabled(false); 
        jTextField_GSR_In.setEditable(false);
        jTextField_GSR_In.setEnabled(false); 
        jTextField_Sleep_In.setEditable(false);
        jTextField_Sleep_In.setEnabled(false); 
        JTextField_Phys_Act_In.setEditable(false);
        JTextField_Phys_Act_In.setEnabled(false);
        jTextField_Body_Weight.setEditable(false);
        jTextField_Body_Weight.setEnabled(false);
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        load_plsdata730_R_12_withcluster lpls = new load_plsdata730_R_12_withcluster();

        try {
            lpls.loadplsdata();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        plsdata_730_R_12_withcluster_16_data pls730R = new plsdata_730_R_12_withcluster_16_data();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        Boolean savedOK = SaveStateToFile(); 
    }//GEN-LAST:event_SaveButtonActionPerformed

    //XXX OPTIMIZE -- is this made defunct by SaveAllData.java? 
    private Boolean SaveStateToFile() { 
        // TODO add your handling code here:
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();

        Save savedata = new Save(DIAS.excelSubdirectory);

        try {
            savedata.save(lgvariables.basal_insulin, "basal_insulin");
            savedata.save(lgvariables.bolus_insulin, "bolus_insulin");
            savedata.save(lgvariables.ee, "ee");
            savedata.save(lgvariables.phys_act, "phys_act");
            savedata.save(lgvariables.sleep, "sleep");
            savedata.save(lgvariables.gsr, "gsr");
            savedata.save(lgvariables.IOB_total, "IOB_total");
            savedata.save(lgvariables.meal_states, "meal_states");
            savedata.save(lgvariables.meal_bolus_amount, "meal_bolus_amount");
            savedata.save(lgvariables.meal_detection, "meal_detection");
            savedata.save(lgvariables.meal_detection_time, "meal_detection_time");
            savedata.save(lgvariables.correction_bolus_amount, "correction_bolus_amount");
            savedata.save(lgvariables.correction_detection, "correction_detection");
            savedata.save(lgvariables.correction_detection_time, "correction_detection_time");
            savedata.save(lgvariables.correction_limit, "correction_limit");
            savedata.save(lgvariables.meal_g_basal, "meal_g_basal");
            savedata.save(lgvariables.meal_gpc_gs_slope_degree, "meal_gpc_gs_slope_degree");
            savedata.save(lgvariables.meal_gpc_mu, "meal_gpc_mu");
            savedata.save(lgvariables.phi, "phi");
            savedata.save(lgvariables.phi_ee, "phi_ee");
            savedata.save(lgvariables.phi_gsr, "phi_gsr");
            savedata.save(lgvariables.armax_parameters, "armax_parameters");
            savedata.save(lgvariables.armax_lamda, "armax_lamda");
            savedata.save(lgvariables.armax_err, "armax_err");
            savedata.save(lgvariables.arma_parameters_ee, "arma_parameters_ee");
            savedata.save(lgvariables.arma_lamda_ee, "arma_lamda_ee");
            savedata.save(lgvariables.arma_err_ee, "arma_err_ee");
            savedata.save(lgvariables.arma_parameters_gsr, "arma_parameters_gsr");
            savedata.save(lgvariables.arma_lamda_gsr, "arma_lamda_gsr");
            savedata.save(lgvariables.arma_err_gsr, "arma_err_gsr");
            savedata.save(lgvariables.X_state, "X_state");
            savedata.save(lgvariables.X_state_ee, "X_state_ee");
            savedata.save(lgvariables.X_state_gsr, "X_state_gsr");
            savedata.save(lgvariables.ee_prediction, "ee_prediction");
            savedata.save(lgvariables.gsr_prediction, "gsr_prediction");
            savedata.save(lgvariables.g_prediction, "g_prediction");
            savedata.save(lgvariables.reference_glucose, "reference_glucose");
            savedata.save(lgvariables.insulin_sensitivity_constant, "insulin_sensitivity_constant");
            savedata.save(lgvariables.IOB_prediction, "IOB_prediction");
            savedata.save(lgvariables.maximum_insulin, "maximum_insulin");
            savedata.save(lgvariables.total_daily_unit, "total_daily_unit");
            savedata.save(lgvariables.insulin_sensitivity_factor, "insulin_sensitivity_factor");
            savedata.save(lgvariables.hypo_threshold, "hypo_threshold");
            savedata.save(lgvariables.hypo_slope_degree, "hypo_slope_degree");
            savedata.save(lgvariables.hypo_alarm, "hypo_alarm");
            savedata.save(lgvariables.hypo_phase, "hypo_phase");
            savedata.save(lgvariables.hypo_phase_old, "hypo_phase_old");
            savedata.save(lgvariables.repeated_immediate_alarm, "repeated_immediate_alarm");
            savedata.save(lgvariables.bolus_insulin_calculated, "bolus_insulin_calculated");
            savedata.save(lgvariables.basal_insulin_calculated, "basal_insulin_calculated");
            savedata.save(lgvariables.gs, "gs");

            savedata.savedouble(lgvariables.CGM_retuning_with_noise_generator, "CGM_retuning_with_noise_generator");
            savedata.savedouble(lgvariables.CGM_retuning_without_noise_generator, "CGM_retuning_without_noise_generator");
            savedata.savedouble(lgvariables.body_weight, "body_weight");
            savedata.savedouble(lgvariables.kj, "kj");

            for (int i = 0; i < lgvariables.kj + 1; i++) {
                savedata.save3D(savedata.change(lgvariables.meal_covariance, i), "meal_covariance", i);
                savedata.save3D(savedata.change(lgvariables.armax_covariance, i), "armax_covariance", i);
                savedata.save3D(savedata.change(lgvariables.arma_covariance_ee, i), "arma_covariance_ee", i);
                savedata.save3D(savedata.change(lgvariables.arma_covariance_gsr, i), "arma_covariance_gsr", i);
                savedata.save3D(savedata.change(lgvariables.A_state, i), "A_state", i);
                savedata.save3D(savedata.change(lgvariables.A_state_ee, i), "A_state_ee", i);
                savedata.save3D(savedata.change(lgvariables.A_state_gsr, i), "A_state_gsr", i);
                savedata.save3D(savedata.change(lgvariables.C_state, i), "C_state", i);
                savedata.save3D(savedata.change(lgvariables.C_state_ee, i), "C_state_ee", i);
                savedata.save3D(savedata.change(lgvariables.C_state_gsr, i), "C_state_gsr", i);
                savedata.save3D(savedata.change(lgvariables.B_state, i), "B_state", i);
                savedata.save3D(savedata.change(lgvariables.K_state, i), "K_state", i);
                savedata.save3D(savedata.change(lgvariables.K_state_ee, i), "K_state_ee", i);
                savedata.save3D(savedata.change(lgvariables.K_state_gsr, i), "K_state_gsr", i);
                savedata.save3D(savedata.change(lgvariables.M, i), "M", i);
                savedata.save3D(savedata.change(lgvariables.M_ee, i), "M_ee", i);
                savedata.save3D(savedata.change(lgvariables.M_gsr, i), "M_gsr", i);
                savedata.save3D(savedata.change(lgvariables.L, i), "L", i);
                savedata.save3D(savedata.change(lgvariables.L_ee, i), "L_ee", i);
                savedata.save3D(savedata.change(lgvariables.L_gsr, i), "L_gsr", i);
            }

            savedata.saveString(lgvariables.batch_CL, "batch_CL");
            savedata.saveString(lgvariables.carb_type, "carb_type");
            savedata.saveString(lgvariables.carb_amount, "carb_amount");

            prevdata_error_summation prdata = new prevdata_error_summation();
            temp_SEDFR_noise tempSnoise = new temp_SEDFR_noise();
            temp_SEDFR_nonoise tempSnonoise = new temp_SEDFR_nonoise();

            savedata.savedouble(TrackData.I_error_rspeed, "I_error_rspeed");
            savedata.savedouble(TrackData.I_me_inst, "I_me_inst");
            savedata.save(TrackData.I_track, "I_track");
            savedata.save(TrackData.data_mem, "data_mem");
            savedata.save(TrackData.I_u_constrain, "I_u_constrain");

            savedata.save(ChangeVariable.compensate_ins, "compensate_ins");
            savedata.save(ChangeVariable.flag_constrains, "flag_constrains");
            savedata.save(ChangeVariable.flag_ratio, "flag_ratio");
            savedata.save(ChangeVariable.g_prediction_feedback, "g_prediction_feedback");
            savedata.save(ChangeVariable.ins_CPA, "ins_CPA");
            savedata.save(ChangeVariable.insulin_CPA, "insulin_CPA");
            savedata.save(ChangeVariable.lamda_CPA, "lamda_CPA");
            savedata.save(ChangeVariable.sensor_error, "sensor_error");

            savedata.save(prdata.D_potential, "D_potential");
            savedata.save(prdata.error_summation, "error_summation");
            savedata.savedouble(prdata.EE, "EE");
            savedata.savedouble(prdata.ME, "ME");

        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            return false; 
        }
        return true; 
    }
    
    private void ShowInfoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void UpdateCGMLabel(double gs, javax.swing.JFrame ui) { 
        jLabel_cgm_display.setText(Double.toString(gs)); 
        ui.repaint(); 
    } 
    
    private void UpdateKJLabel(int kj, javax.swing.JFrame ui) { 
        jLabel_kj_display.setText(Integer.toString(kj)); 
        ui.repaint(); //not sure why setText() isn't always doing what it should and repainting. 
    } 
    
    private void UpdateKJ_FromLabel(int kj, javax.swing.JFrame ui) { 
        this.jTextField_kj_from.setText(Integer.toString(kj)); 
        ui.repaint(); 
    }
    
    private void UpdateKJ_ToLabel(int kj, javax.swing.JFrame ui) { 
        this.jTextField_kj_to.setText(Integer.toString(kj)); 
        ui.repaint(); 
    }
    
    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        Boolean loadedOK = LoadVariablesFromFiles(); 
        if (loadedOK) { this.RunInput.setEnabled(true); } 
    }//GEN-LAST:event_LoadButtonActionPerformed

    /** 
     * 
     * @return Boolean : false if failure occurred during file load; true if load completed successfully. 
     */
    private Boolean LoadVariablesFromFiles() { 
// There used to be a call to the CGM__SEDFR_JF constructor here, but the variable was never used, so I removed it. 
        // CGM__SEDFR_JF cs = new CGM__SEDFR_JF();
        
// m20150711_load_global_variables constructor mostly initializes boilerplate objects. 
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        int kj_from_temp = DIAS.kj_start; //Yeah, we overwrite this immediately, but it's a good way to start with a valid value. 
        Load loaddata = new Load(DIAS.excelSubdirectory);
        try { kj_from_temp = (int) loaddata.loaddouble("kj"); } 
        catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            return false; //we failed to load a kj, so fail out and have the calling application get the error. 
        }
        
        try {
            //Set the starting KJ value to be the value we got from the loaded files + 1, and the ending kj value to be (whatever's already in the "end" value, or the loaded kj value, whichever is greater). 
            // We do also want to nuke whatever's in lgvariables right now, so that our loaded values totally overwrite what's there. 
            Integer kj_to_temp = Math.max(this.GetUIValue_KJ_To(), kj_from_temp); 
            RefreshKJValues(lgvariables, kj_from_temp, kj_to_temp, true);
            // The file has the last used KJ value in it. We need to increment by one, since all the matrices need their dimensions to be based on the current processing value of kj. Fun! 
            lgvariables.kj = (int) (kj_from_temp + 1); 
            
            //why are we loading basal_insulin here in the parameter? That's our problem -- it's still got the old dimensions from before we incremented kj. 
            //lgvariables.basal_insulin = DIAS.createnewMatrix(8, lgvariables.kj, loaddata.load(lgvariables.basal_insulin, "basal_insulin"));
            lgvariables.basal_insulin = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.basal_insulin); 
            
            if (DIAS.verboseMode) { 
                DIAS.printMatrix(lgvariables.basal_insulin, "lgvariables.basal_insulin");
            } 

            lgvariables.bolus_insulin = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.bolus_insulin);
            lgvariables.ee = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.ee);
            lgvariables.phys_act = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.phys_act);
            lgvariables.sleep = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.sleep);
            lgvariables.gsr = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.gsr);
            lgvariables.IOB_total = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.IOB_total);
            lgvariables.meal_states = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.meal_states);
            lgvariables.meal_bolus_amount = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_bolus_amount);
            lgvariables.meal_detection = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_detection);
            lgvariables.meal_detection_time = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_detection_time);
            lgvariables.correction_bolus_amount = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_bolus_amount);
            lgvariables.correction_detection = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_detection);
            lgvariables.correction_detection_time = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_detection_time);
            lgvariables.correction_limit = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.correction_limit);
            lgvariables.meal_g_basal = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_g_basal);
            lgvariables.meal_gpc_gs_slope_degree = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_gpc_gs_slope_degree);
            lgvariables.meal_gpc_mu = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.meal_gpc_mu);
            lgvariables.phi = DIAS.createnewMatrix(lgvariables.phi.getRowDimension(), lgvariables.phi.getColumnDimension(), lgvariables.phi);
            lgvariables.phi_ee = DIAS.createnewMatrix(lgvariables.phi_ee.getRowDimension(), lgvariables.phi_ee.getColumnDimension(), lgvariables.phi_ee);
            lgvariables.phi_gsr = DIAS.createnewMatrix(lgvariables.phi_gsr.getRowDimension(), lgvariables.phi_gsr.getColumnDimension(), lgvariables.phi_gsr);
            lgvariables.armax_parameters = DIAS.createnewMatrix(lgvariables.armax_parameters.getRowDimension(), lgvariables.kj, lgvariables.armax_parameters);
            lgvariables.armax_lamda = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.armax_lamda);
            lgvariables.armax_err = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.armax_err);
            lgvariables.arma_parameters_ee = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.arma_parameters_ee);
            lgvariables.arma_parameters_gsr = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.arma_parameters_gsr);
            lgvariables.arma_lamda_ee = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_lamda_ee);
            lgvariables.arma_err_ee = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_err_ee);
            lgvariables.arma_parameters_gsr = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.arma_parameters_gsr);
            lgvariables.arma_lamda_gsr = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_lamda_gsr);
            lgvariables.arma_err_gsr = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.arma_err_gsr);
            lgvariables.X_state = DIAS.createnewMatrix(21, lgvariables.kj, lgvariables.X_state);
            lgvariables.X_state_ee = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.X_state_ee);
            lgvariables.X_state_gsr = DIAS.createnewMatrix(4, lgvariables.kj, lgvariables.X_state_gsr);
            lgvariables.ee_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.ee_prediction);
            lgvariables.gsr_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.gsr_prediction);
            lgvariables.g_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.g_prediction);
            lgvariables.reference_glucose = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.reference_glucose);
            lgvariables.insulin_sensitivity_constant = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.insulin_sensitivity_constant);
            lgvariables.IOB_prediction = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.IOB_prediction);
            lgvariables.maximum_insulin = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.maximum_insulin);
            lgvariables.total_daily_unit = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.total_daily_unit);
            lgvariables.insulin_sensitivity_factor = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.insulin_sensitivity_factor);
            lgvariables.hypo_threshold = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_threshold);
            lgvariables.hypo_slope_degree = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_slope_degree);
            lgvariables.hypo_alarm = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_alarm);
            lgvariables.hypo_phase = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_phase);
            lgvariables.hypo_phase_old = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.hypo_phase_old);
            lgvariables.repeated_immediate_alarm = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.repeated_immediate_alarm);
            lgvariables.bolus_insulin_calculated = DIAS.createnewMatrix(lgvariables.kj, 1, lgvariables.bolus_insulin_calculated);
            lgvariables.basal_insulin_calculated = DIAS.createnewMatrix(8, lgvariables.kj, lgvariables.basal_insulin_calculated);
            lgvariables.gs = DIAS.createnewMatrix(1, lgvariables.kj, lgvariables.gs);
            lgvariables.basal_insulin = loaddata.load(lgvariables.basal_insulin, "basal_insulin");
            lgvariables.bolus_insulin = loaddata.load(lgvariables.bolus_insulin, "bolus_insulin");
            lgvariables.ee = loaddata.load(lgvariables.ee, "ee");
            lgvariables.phys_act = loaddata.load(lgvariables.phys_act, "phys_act");
            lgvariables.sleep = loaddata.load(lgvariables.sleep, "sleep");
            lgvariables.gsr = loaddata.load(lgvariables.gsr, "gsr");
            lgvariables.IOB_total = loaddata.load(lgvariables.IOB_total, "IOB_total");
            lgvariables.meal_states = loaddata.load(lgvariables.meal_states, "meal_states");
            lgvariables.meal_bolus_amount = loaddata.load(lgvariables.meal_bolus_amount, "meal_bolus_amount");
            lgvariables.meal_detection = loaddata.load(lgvariables.meal_detection, "meal_detection");
            lgvariables.meal_detection_time = loaddata.load(lgvariables.meal_detection_time, "meal_detection_time");
            lgvariables.correction_bolus_amount = loaddata.load(lgvariables.correction_bolus_amount, "correction_bolus_amount");
            lgvariables.correction_detection = loaddata.load(lgvariables.correction_detection, "correction_detection");
            lgvariables.correction_detection_time = loaddata.load(lgvariables.correction_detection_time, "correction_detection_time");
            lgvariables.correction_limit = loaddata.load(lgvariables.correction_limit, "correction_limit");
            lgvariables.meal_g_basal = loaddata.load(lgvariables.meal_g_basal, "meal_g_basal");
            lgvariables.meal_gpc_gs_slope_degree = loaddata.load(lgvariables.meal_gpc_gs_slope_degree, "meal_gpc_gs_slope_degree");
            lgvariables.meal_gpc_mu = loaddata.load(lgvariables.meal_gpc_mu, "meal_gpc_mu");
            lgvariables.phi = loaddata.load(lgvariables.phi, "phi");
            lgvariables.phi_ee = loaddata.load(lgvariables.phi_ee, "phi_ee");
            lgvariables.phi_gsr = loaddata.load(lgvariables.phi_gsr, "phi_gsr");
            lgvariables.armax_parameters = loaddata.load(lgvariables.armax_parameters, "armax_parameters");
            lgvariables.armax_lamda = loaddata.load(lgvariables.armax_lamda, "armax_lamda");
            lgvariables.armax_err = loaddata.load(lgvariables.armax_err, "armax_err");
            lgvariables.arma_parameters_ee = loaddata.load(lgvariables.arma_parameters_ee, "arma_parameters_ee");
            lgvariables.arma_lamda_ee = loaddata.load(lgvariables.arma_lamda_ee, "arma_lamda_ee");
            lgvariables.arma_err_ee = loaddata.load(lgvariables.arma_err_ee, "arma_err_ee");
            lgvariables.arma_parameters_gsr = loaddata.load(lgvariables.arma_parameters_gsr, "arma_parameters_gsr");
            lgvariables.arma_lamda_gsr = loaddata.load(lgvariables.arma_lamda_gsr, "arma_lamda_gsr");
            lgvariables.arma_err_gsr = loaddata.load(lgvariables.arma_err_gsr, "arma_err_gsr");
            lgvariables.X_state = loaddata.load(lgvariables.X_state, "X_state");
            lgvariables.X_state_ee = loaddata.load(lgvariables.X_state_ee, "X_state_ee");
            lgvariables.X_state_gsr = loaddata.load(lgvariables.X_state_gsr, "X_state_gsr");
            lgvariables.ee_prediction = loaddata.load(lgvariables.ee_prediction, "ee_prediction");
            lgvariables.gsr_prediction = loaddata.load(lgvariables.gsr_prediction, "gsr_prediction");
            lgvariables.g_prediction = loaddata.load(lgvariables.g_prediction, "g_prediction");
            lgvariables.reference_glucose = loaddata.load(lgvariables.reference_glucose, "reference_glucose");
            lgvariables.insulin_sensitivity_constant = loaddata.load(lgvariables.insulin_sensitivity_constant, "insulin_sensitivity_constant");
            lgvariables.IOB_prediction = loaddata.load(lgvariables.IOB_prediction, "IOB_prediction");
            lgvariables.maximum_insulin = loaddata.load(lgvariables.maximum_insulin, "maximum_insulin");
            lgvariables.total_daily_unit = loaddata.load(lgvariables.total_daily_unit, "total_daily_unit");
            lgvariables.insulin_sensitivity_factor = loaddata.load(lgvariables.insulin_sensitivity_factor, "insulin_sensitivity_factor");
            lgvariables.hypo_threshold = loaddata.load(lgvariables.hypo_threshold, "hypo_threshold");
            lgvariables.hypo_slope_degree = loaddata.load(lgvariables.hypo_slope_degree, "hypo_slope_degree");
            lgvariables.hypo_alarm = loaddata.load(lgvariables.hypo_alarm, "hypo_alarm");
            lgvariables.hypo_phase = loaddata.load(lgvariables.hypo_phase, "hypo_phase");
            lgvariables.hypo_phase_old = loaddata.load(lgvariables.hypo_phase_old, "hypo_phase_old");
            lgvariables.repeated_immediate_alarm = loaddata.load(lgvariables.repeated_immediate_alarm, "repeated_immediate_alarm");
            lgvariables.bolus_insulin_calculated = loaddata.load(lgvariables.bolus_insulin_calculated, "bolus_insulin_calculated");
            lgvariables.basal_insulin_calculated = loaddata.load(lgvariables.basal_insulin_calculated, "basal_insulin_calculated");
            lgvariables.gs = loaddata.load(lgvariables.gs, "gs");

            lgvariables.CGM_retuning_with_noise_generator = loaddata.loaddouble("CGM_retuning_with_noise_generator");
            lgvariables.CGM_retuning_without_noise_generator = loaddata.loaddouble("CGM_retuning_without_noise_generator");
            lgvariables.body_weight = loaddata.loaddouble("body_weight");

            m20150711_gpc gpc = new m20150711_gpc();

            lgvariables.meal_covariance = gpc.createnew3Dmatrix(lgvariables.meal_covariance, 8, 8, lgvariables.kj);
            lgvariables.armax_covariance = gpc.createnew3Dmatrix(lgvariables.armax_covariance, 24, 24, lgvariables.kj);
            lgvariables.arma_covariance_ee = gpc.createnew3Dmatrix(lgvariables.arma_covariance_ee, 4, 4, lgvariables.kj);
            lgvariables.arma_covariance_gsr = gpc.createnew3Dmatrix(lgvariables.arma_covariance_gsr, 4, 4, lgvariables.kj);
            lgvariables.A_state = gpc.createnew3Dmatrix(lgvariables.A_state, 22, 24, lgvariables.kj);
            lgvariables.A_state_ee = gpc.createnew3Dmatrix(lgvariables.A_state_ee, 4, 4, lgvariables.kj);
            lgvariables.A_state_gsr = gpc.createnew3Dmatrix(lgvariables.A_state_gsr, 4, 4, lgvariables.kj);
            lgvariables.C_state = gpc.createnew3Dmatrix(lgvariables.C_state, 1, 22, lgvariables.kj);
            lgvariables.C_state_ee = gpc.createnew3Dmatrix(lgvariables.C_state_ee, 1, 4, lgvariables.kj);
            lgvariables.C_state_gsr = gpc.createnew3Dmatrix(lgvariables.C_state_gsr, 1, 4, lgvariables.kj);
            lgvariables.B_state = gpc.createnew3Dmatrix(lgvariables.B_state, 21, 3, lgvariables.kj);
            lgvariables.K_state = gpc.createnew3Dmatrix(lgvariables.K_state, 21, 1, lgvariables.kj);
            lgvariables.K_state_ee = gpc.createnew3Dmatrix(lgvariables.K_state_ee, 4, 1, lgvariables.kj);
            lgvariables.K_state_gsr = gpc.createnew3Dmatrix(lgvariables.K_state_gsr, 4, 1, lgvariables.kj);
            lgvariables.M = gpc.createnew3Dmatrix(lgvariables.M, 8, 21, lgvariables.kj);
            lgvariables.M_ee = gpc.createnew3Dmatrix(lgvariables.M_ee, 8, 4, lgvariables.kj);
            lgvariables.M_gsr = gpc.createnew3Dmatrix(lgvariables.M_gsr, 8, 4, lgvariables.kj);
            lgvariables.L = gpc.createnew3Dmatrix(lgvariables.L, 8, 8, lgvariables.kj);
            lgvariables.L_ee = gpc.createnew3Dmatrix(lgvariables.L_ee, 8, 8, lgvariables.kj);
            lgvariables.L_gsr = gpc.createnew3Dmatrix(lgvariables.L_gsr, 8, 8, lgvariables.kj);

            DIAS.print3DMatrix(lgvariables.meal_covariance, "lgvariables.meal_covariance");
            DIAS.printMatrix(lgvariables.meal_states, "lgvariables.meal_states");
            lgvariables.meal_covariance = loaddata.load3D(lgvariables.meal_covariance, "meal_covariance", lgvariables.kj);
            lgvariables.armax_covariance = loaddata.load3D(lgvariables.armax_covariance, "armax_covariance", lgvariables.kj);
            lgvariables.arma_covariance_ee = loaddata.load3D(lgvariables.arma_covariance_ee, "arma_covariance_ee", lgvariables.kj);
            lgvariables.arma_covariance_gsr = loaddata.load3D(lgvariables.arma_covariance_gsr, "arma_covariance_gsr", lgvariables.kj);
            lgvariables.A_state = loaddata.load3D(lgvariables.A_state, "A_state", lgvariables.kj);
            lgvariables.A_state_ee = loaddata.load3D(lgvariables.A_state_ee, "A_state_ee", lgvariables.kj);
            lgvariables.A_state_gsr = loaddata.load3D(lgvariables.A_state_gsr, "A_state_gsr", lgvariables.kj);
            lgvariables.C_state = loaddata.load3D(lgvariables.C_state, "C_state", lgvariables.kj);
            lgvariables.C_state_ee = loaddata.load3D(lgvariables.C_state_ee, "C_state_ee", lgvariables.kj);
            lgvariables.C_state_gsr = loaddata.load3D(lgvariables.C_state_gsr, "C_state_gsr", lgvariables.kj);
            lgvariables.B_state = loaddata.load3D(lgvariables.B_state, "B_state", lgvariables.kj);
            lgvariables.K_state = loaddata.load3D(lgvariables.K_state, "K_state", lgvariables.kj);
            lgvariables.K_state_ee = loaddata.load3D(lgvariables.K_state_ee, "K_state_ee", lgvariables.kj);
            lgvariables.K_state_gsr = loaddata.load3D(lgvariables.K_state_gsr, "K_state_gsr", lgvariables.kj);
            lgvariables.M = loaddata.load3D(lgvariables.M, "M", lgvariables.kj);
            lgvariables.M_ee = loaddata.load3D(lgvariables.M_ee, "M_ee", lgvariables.kj);
            lgvariables.M_gsr = loaddata.load3D(lgvariables.M_gsr, "M_gsr", lgvariables.kj);
            lgvariables.L = loaddata.load3D(lgvariables.L, "L", lgvariables.kj);
            lgvariables.L_ee = loaddata.load3D(lgvariables.L_ee, "L_ee", lgvariables.kj);
            lgvariables.L_gsr = loaddata.load3D(lgvariables.L_gsr, "L_gsr", lgvariables.kj);

            lgvariables.carb_amount = loaddata.loadString("carb_amount", lgvariables.kj);
            lgvariables.carb_type = loaddata.loadString("carb_type", lgvariables.kj);
            lgvariables.batch_CL = loaddata.loadString("batch_CL", lgvariables.kj);

            DIAS.print3DMatrix(lgvariables.meal_covariance, "lgvariables.meal_covariance");
            DIAS.printMatrix(lgvariables.meal_states, "lgvariables.meal_states");
            
            //XXX DEBUG : Is this going to be an off-by-one error?  
            lgvariables.kj = lgvariables.kj - 1;
            UpdateKJLabel(lgvariables.kj, this);
            UpdateCGMLabel(lgvariables.gs.get(0, lgvariables.kj), this); 
            

        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            return false; 
        }
        return true; 
    } 
    
    private void jTextField_GS_InActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_GS_InActionPerformed
        // TODO add your handling code here:
        // m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        // lgvariables.gs_in=Double.parseDouble (jTextField1.getText());

    }//GEN-LAST:event_jTextField_GS_InActionPerformed

    private void jTextField_EE_InActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_EE_InActionPerformed
        // TODO add your handling code here:
        //  m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        // lgvariables.ee_in=Double.parseDouble (jTextField1.getText());

    }//GEN-LAST:event_jTextField_EE_InActionPerformed

    private void jTextField_GSR_InActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_GSR_InActionPerformed
        // TODO add your handling code here:
        //  m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        //  lgvariables.ee_in=Double.parseDouble (jTextField1.getText());

    }//GEN-LAST:event_jTextField_GSR_InActionPerformed

    private void jTextField_Sleep_InActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_Sleep_InActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_Sleep_InActionPerformed

    private void JTextField_Phys_Act_InActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTextField_Phys_Act_InActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JTextField_Phys_Act_InActionPerformed

    private void jTextField_Body_WeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_Body_WeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_Body_WeightActionPerformed

    private void GetInitialValuesFromUI() { 
        //Check to make sure that the UI is in a good state. 
        UIValidation validation = new UIValidation(this); 
        if (!(validation.Valid())) { 
            ShowInfoBox(validation.Valid_Msg(), "GetInputsButtonActionPerformed"); 
            return; 
        }
        
        //Everything OK? Set initial values to the GUI inputs, if user has overridden the defaults. 
        Double gs_initial_UI = this.GetUIValue_GS_In(); 
        DIAS.gs_initial = gs_initial_UI; 
        DIAS.ee_in = this.GetUIValue_EE_In(); 
        DIAS.gsr_in = this.GetUIValue_GSR_In(); 
        DIAS.sleep_in = this.GetUIValue_Sleep_In();  
        DIAS.phys_act_in = this.GetUIValue_Phys_Act_In(); 
        DIAS.body_weight = this.GetUIValue_Body_Weight(); 
        
        //and set up a new VirtualCgm object with the initial values from the UI. This is just in case we've changed those values -- this may be unnecessary, depending on how we manage the UI workflow. 
        vcgm = new VirtualCgm(gs_initial_UI); 
       
    } 
    
    /** 
     * Updates the lgvariables (m20150711_load_global_variables) static properties : 
     * gs_in, ee_in, gsr_in, sleep_in, phys_act_in, body_weight
     * 
     * @param evt ActionEvent from the action button
     */
    private void GetInputsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetInputsButtonActionPerformed
        //Check to make sure that the UI is in a good state. 
        UIValidation validation = new UIValidation(this); 
        if (!(validation.Valid())) { 
            ShowInfoBox(validation.Valid_Msg(), "GetInputsButtonActionPerformed"); 
            return; 
        } 
        
        // Load global variables with the UI inputs, overwriting whatever already exists in the global variables. 
        m20150711_load_global_variables lgvariables = new m20150711_load_global_variables();
        lgvariables.gs_in = this.GetUIValue_GS_In(); 
        lgvariables.ee_in = this.GetUIValue_EE_In(); 
        lgvariables.gsr_in = this.GetUIValue_GSR_In(); 
        lgvariables.sleep_in = this.GetUIValue_Sleep_In(); 
        lgvariables.phys_act_in = this.GetUIValue_Phys_Act_In(); 
        lgvariables.body_weight = this.GetUIValue_Body_Weight(); 
        
        //get our "from" kj value and refresh lgvariables with it. Set both the "from" and "to" in the UI to that value. 
        // We -do- want to nuke lgvariables with the setup() command here, so we supply True to SetupLGVariables. 
        Integer kj_start = GetUIValue_KJ_From();
        RefreshKJValues(lgvariables, kj_start, kj_start, true); 
        
        //Finally, now that we've gotten valid inputs and set up lgvariables, allow the "run" button to be used. 
        this.RunInput.setEnabled(true);
    }//GEN-LAST:event_GetInputsButtonActionPerformed

    private void RefreshKJValues(m20150711_load_global_variables lg, Integer kj_from, Integer kj_to, Boolean SetupLGVariables) {
        if (SetupLGVariables) {
            lg.setup(kj_from);  
        } 
        else { 
            lg.kj = kj_from; 
        } 
        UpdateKJLabel(lg.kj, this); 
        UpdateKJ_FromLabel(lg.kj, this); //overwrite the "from" kj value in UI. 
        UpdateKJ_ToLabel(kj_to, this); //overwrite the "to" kj value in UI. 
    }
    
    private Double GetUIValue_Body_Weight() { 
        try {
            return Double.parseDouble(this.jTextField_Body_Weight.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    }
    
    private Double GetUIValue_EE_In() { 
          try {
            return Double.parseDouble(this.jTextField_EE_In.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    }
    
    private Double GetUIValue_GS_In() { 
        try {
            return Double.parseDouble(this.jTextField_GS_In.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    }
    
    private Double GetUIValue_GSR_In() { 
          try {
            return Double.parseDouble(this.jTextField_GSR_In.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    } 
    
    private Double GetUIValue_Phys_Act_In() { 
        try {
            return Double.parseDouble(this.JTextField_Phys_Act_In.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    }
    
    private Double GetUIValue_Sleep_In() { 
          try {
            return Double.parseDouble(this.jTextField_Sleep_In.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    } 
    
    /**
     * A simple call to get the KJ "from" value from the UI. If the value in the KJ "from" text field is not a parseable integer, returns NULL. 
     * @return Valid integer, or NULL. 
     */
    private Integer GetUIValue_KJ_From() { 
        try {
            return Integer.parseInt(this.jTextField_kj_from.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    }
    
        /**
     * A simple call to get the KJ "to" value from the UI. If the value in the KJ "to" text field is not a parseable integer, returns NULL. 
     * @return Valid integer, or NULL. 
     */
    private Integer GetUIValue_KJ_To() { 
        try {
            return Integer.parseInt(this.jTextField_kj_to.getText());
          } catch (NumberFormatException e) {
            return null;
          }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearHistoryButton;
    private javax.swing.JButton GetInputsButton;
    private javax.swing.JTextField JTextField_Phys_Act_In;
    private javax.swing.JButton LoadButton;
    private javax.swing.JButton RunInput;
    private javax.swing.JButton SaveButton;
    private javax.swing.JLabel jBasalLabel;
    public static javax.swing.JLabel jBasalValue;
    private javax.swing.JLabel jBolusLabel;
    public static javax.swing.JLabel jBolusValue;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_cgm_display;
    private javax.swing.JLabel jLabel_kj_display;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField_Body_Weight;
    private javax.swing.JTextField jTextField_EE_In;
    private javax.swing.JTextField jTextField_GSR_In;
    private javax.swing.JTextField jTextField_GS_In;
    private javax.swing.JTextField jTextField_Sleep_In;
    private javax.swing.JTextField jTextField_kj_from;
    private javax.swing.JTextField jTextField_kj_to;
    // End of variables declaration//GEN-END:variables

    /** 
     * A class to encapsulate all validation of an instance of the dias.GUI class. 
     * Performs its validation as part of the constructor, which gets passed the instance of the dias.GUI which it is meant to validate. 
     */
    private class UIValidation { 
        private String Valid_Msg; 
        private Boolean Valid; 
        public UIValidation(GUI ui) { 
            Integer kj_from_tmp = 0; 
            Integer kj_to_tmp = 0; 
            this.Valid = false; //be pessimistic
            this.Valid_Msg = "Validation not yet completed."; 
            kj_from_tmp = ui.GetUIValue_KJ_From(); 
            kj_to_tmp = ui.GetUIValue_KJ_To(); 
            if (kj_from_tmp == null) { 
                this.Valid_Msg = "KJ 'from' value is not an valid integer."; 
                return; 
            } 
            if (kj_to_tmp == null) { 
                this.Valid_Msg = "KJ 'to' value is not a valid integer."; 
                return; 
            } 
            if (kj_from_tmp > kj_to_tmp) { //OK to do this here, since we already checked for nulls.
                this.Valid_Msg = "KJ 'from' value is greater than KJ 'to' value."; 
                return; 
            } 
            
            if (ui.GetUIValue_Body_Weight() == null) { 
                this.Valid_Msg = "Body weight value is not a valid number."; 
                return; 
            } 
            
            if (ui.GetUIValue_EE_In() == null) { 
                this.Valid_Msg = "EE value is not a valid number."; 
                return; 
            } 
            
            if (ui.GetUIValue_GSR_In() == null) { 
                this.Valid_Msg = "GSR value is not a valid number."; 
                return; 
            } 
            
            if (ui.GetUIValue_GS_In() == null) { 
                this.Valid_Msg = "GS value is not a valid number."; 
                return; 
            } 
            
            if (ui.GetUIValue_Phys_Act_In() == null) { 
                this.Valid_Msg = "Physical activity value is not a valid number."; 
                return; 
            } 
            
            if (ui.GetUIValue_Sleep_In() == null) { 
                this.Valid_Msg = "Sleep value is not a valid number."; 
                return; 
            } 
            
            //get past all our checks? OK, it's valid. 
            this.Valid = true; 
        }
        
        public Boolean Valid() { 
            return this.Valid; 
        } 
        
        public String Valid_Msg() { 
            return this.Valid_Msg;
        } 
    }
}
