<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DexCom.ReceiverTools</name>
    </assembly>
    <members>
        <member name="T:DexCom.ReceiverTools.ReceiverContext">
            <summary>
            Represents an individual receiver and provides the means to retrieve data from it
            </summary>
        </member>
        <member name="T:DexCom.Common.LongRunningOperation">
            <summary>
            Abstract reference implementation of <see cref="T:DexCom.Common.ILongRunningOperation"/>
            
            </summary>
        </member>
        <member name="T:DexCom.Common.ILongRunningOperation">
            <summary>
            Supports long running (threaded) operations and lifecycle management
            </summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Abort">
            <summary>Aborts operation</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Abort(System.Exception)">
            <summary>
            Aborts operation
            </summary>
            <param name="exception">exception leading to the abort. <see cref="P:DexCom.Common.ILongRunningOperation.AbortedException"/></param>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Run">
            <summary>Starts operation</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Reset">
            <summary>Prepares operation to start</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.RequestExit">
            <summary>Exits operation and does not wait for it to exit</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Exit">
            <summary>Exits operation and waits for it to exit</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Exit(System.TimeSpan)">
            <summary>Exits operation and waits <param name="timeout"/> for it to exit</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.RequestPause">
            <summary>Pauses operation and does not wait for it to pause</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Pause">
            <summary>Pauses operation and waits for it to pause</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.Pause(System.TimeSpan)">
            <summary>Pauses operation and waits <param name="timeout"/> for it to pause</summary>
        </member>
        <member name="M:DexCom.Common.ILongRunningOperation.RequestResume">
            <summary>Resumes operation and does not wait for it to resume</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsReady">
            <summary>Indicates if operation is ready to start</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsReadyOrStarting">
            <summary>Indicates if operation is ready to start or has been started (not yet running)</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsRunning">
            <summary>Indicates  if operation has completed startup and is running</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsExited">
            <summary>Indicates if operation was running and is stopped, not ready to start</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsExiting">
            <summary>Indicates  if operation was running and is in the process of stopping</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsAborted">
            <summary>Indicates if operation is aborting or aborted</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsPaused">
            <summary>Indicates  if operation was running and is paused and ready to resume</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.IsPausing">
            <summary>Indicates  if operation was running and is in the process of pausing</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.CurrentState">
            <summary>Indicates the current operation state</summary>
        </member>
        <member name="P:DexCom.Common.ILongRunningOperation.AbortedException">
            <summary>retrieves exception that prompted an abort of the operation</summary>
        </member>
        <member name="E:DexCom.Common.ILongRunningOperation.StateChangedEvent">
            <summary>Fired when the operating state changes</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_currentState">
            <summary>current operation state, default state is unknown</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_exitRequestedEvent">
            <summary>request to exit operation gate</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_operationEndedEvent">
            <summary>operation ended gate</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_pauseRequestedEvent">
            <summary>request to pause operation gate</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_operationPausedEvent">
            <summary>current operation paused gate</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_resumeRequestedEvent">
            <summary>request to resume operation gate</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_abortedException">
            <summary>current exception leading to operation abort</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.m_operationLock">
            <summary>internal synchronization object</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperation.InfiniteTimeSpan">
            <summary>Represents -1 milliseconds</summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.ClearAllEventsBeforeExit">
            <summary>Disables raising of <see cref="E:DexCom.Common.LongRunningOperation.StateChangedEvent"/></summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.ChangeOperationState(DexCom.Common.LongRunningOperationState)">
            <summary>
            Sets new operational state, fires <see cref="E:DexCom.Common.LongRunningOperation.StateChangedEvent"/>
            </summary>
            <param name="newState">current state</param>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.#ctor">
            <summary>
            Creates operation, resets operation
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.WaitOperation(System.TimeSpan)">
            <summary>
            Returns int value = WaitHandle.WaitTimeout if timed out.  Otherwise, 0 = Exit Requested, 1 = Operation Ended, 2 = Pause Requested, 3 = Resume Requested
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.WaitOperation(System.TimeSpan,System.Threading.ManualResetEvent)">
            <summary>
            Returns int value = WaitHandle.WaitTimeout if timed out.  Otherwise, 0 = Private Event, 1 = Exit Requested, 2 = Operation Ended, 3 = Pause Requested, 4 = Resume Requested
            </summary>
            <param name="timeout"></param>
            <param name="privateEvent"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Abort">
            <summary>
            Aborts operation that was not already aborted, is not aborting, and is not in a ready state
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Abort(System.Exception)">
            <summary>
            Aborts operation that was not already aborted, is not aborting, and is not in a ready state, given an exception as the reason for the abort
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Run">
            <summary>
            Starts operation
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Reset">
            <summary>
            Resets the long running operation's state so it is ready to run again.  
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.RequestExit">
            <summary>
            Flags the running operation to exit without waiting.
            </summary>
            <returns>True if operation was running, false if operation was not running.</returns>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Exit">
            <summary>
            Exits the running operation and waits up to 20s for it to exit
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Exit(System.TimeSpan)">
            <summary>
            Exits the running operation and waits up to <paramref name="timeout"/> for it to exit
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.RequestPause">
            <summary>
            Flags the running operation to pause without waiting.
            </summary>
            <returns>True if operation was running, false if operation was not running.</returns>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Pause">
            <summary>
            Pauses running operation and waits up to 20s for it to pause
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Pause(System.TimeSpan)">
            <summary>
            Pauses running operation and waits up to <paramref name="timeout"/> for it to pause
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Paused">
            <summary>
            Sets operating state to pause if in the process of pausing
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.RequestResume">
            <summary>
            Flags pause operation to resume running without waiting.
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Resumed">
            <summary>
            Sets operating state to running if in the process of resuming
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.CheckDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Dispose">
            <summary>
            Disables event firing and closes event wait handles
            </summary>
        </member>
        <member name="M:DexCom.Common.LongRunningOperation.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsReady">
            <summary>determines if operation is ready to start</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsStarting">
            <summary>determines if operation is in the process of starting to run</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsReadyOrStarting">
            <summary>determines if operation is ready to start or has been started (not yet running)</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsRunning">
            <summary>determines if operation is running/exiting/resuming</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsExited">
            <summary>determines if operation was running and is stopped, not ready to start</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsExiting">
            <summary>determines if operation was running and is in the process of stopping</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsAborted">
            <summary>determines if operation is aborting or aborted</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsPaused">
            <summary>determines if operation was running and is paused and ready to resume</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsPausing">
            <summary>determines if operation was running and is in the process of pausing</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsResuming">
            <summary>determines if operation was paused and is in the processing of resuming</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.CurrentState">
            <summary>returns current operating state</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.AbortedException">
            <summary>returns exception associated with the abortion of the operation</summary>
        </member>
        <member name="E:DexCom.Common.LongRunningOperation.StateChangedEvent">
            <summary>event fired on changes in operating state</summary>
        </member>
        <member name="P:DexCom.Common.LongRunningOperation.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.#ctor(DexCom.ReceiverApi.DeviceRegistryInfo)">
            <summary>
            Create a new receiver context for a given port.
            </summary>
            <param name="registryInfo">Device info for an "attached" receiver COM port.</param>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.DoIncrementalReadOfReceiverData(System.Boolean,System.Boolean)">
            <summary>
            Reads in any EGV or Meter records in the receiver that are newer than our most recent record.  This is ALL records the first time.
            </summary>
            <param name="doFireEvents"></param>
            <param name="isManualSync"></param>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.GetEstimatedGlucoseRecordsSince(System.DateTime)">
            <summary>
            Returns all EGV with a display time greater than or equal to (i.e. more recent than) the specified criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.QueryEstimatedGlucoseRecords(System.Predicate{DexCom.ReceiverTools.EstimatedGlucoseRecord})">
            <summary>
            Returns estimated glucose records found according to the provided criteria
            </summary>
            <param name="predicate">Criteria to use for query</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.GetMeterRecordsSince(System.DateTime)">
            <summary>
            Returns all meter records with a display time greater than or equal to (i.e. more recent than) the specified criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.QueryMeterRecords(System.Predicate{DexCom.ReceiverTools.MeterRecord})">
            <summary>
            Returns meter records found according to the provided criteria
            </summary>
            <param name="predicate">Criteria to use for query</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.GetSettingsRecordsSince(System.DateTime)">
            <summary>
            Returns all settings records with a display time greater than or equal to (i.e. more recent than) the specified criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.QuerySettingsRecords(System.Predicate{DexCom.ReceiverTools.SettingsRecord})">
            <summary>
            Returns settings records found according to the provided criteria
            </summary>
            <param name="predicate">Criteria to use for query</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.GetInsertionTimeRecordsSince(System.DateTime)">
            <summary>
            Returns all insertion records with a display time greater than or equal to (i.e. more recent than) the specified criteria.
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.QueryInsertionTimeRecords(System.Predicate{DexCom.ReceiverTools.InsertionTimeRecord})">
            <summary>
            Returns insertion records found according to the provided criteria
            </summary>
            <param name="predicate">Criteria to use for query</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.ReadSystemTime">
            <summary>
            Retrieves receiver's internal time
            </summary>
            <returns>UTC timestamp</returns>
            <remarks>Set during manufacturing</remarks>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.ReadDisplayTime">
            <summary>
            Retrieves receiver's timestamp as displayed to user by the receiver
            </summary>
            <returns>Timestamp displayed to user</returns>
            <remarks>Display time is settable by the user</remarks>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.ReadGlucoseDisplayUnits">
            <summary>
            Retrieves the units used to display glucose values on receiver screen
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.ReadTransmitterId">
            <summary>
            Retrieves the transmitter id set for the receiver
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.ReadDatabaseRecords(System.Boolean)">
            <summary>
            Populates this ReceiverContext's database records (Meter, Glucose) by downloading all records not already read.
            This operation may take a few seconds to sync all the receiver records.
            </summary>
            <param name="doFireEvents">Boolean to control if events should be fired.</param>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.ClearAllEventsBeforeExit">
            <summary>
             Call this to manually clear out all event listeners (subscribers) so that we avoid extraneous/unwanted events that might fire during shutdown/exit.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.RunInBackground">
            <summary>
            Helps launch the Run() method on a background thread. Use the Pause/Resume/Exit/etc. methods to control the execution of this operation.  
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.Run">
            <summary>
            Normally called from a background thread (see RunInBackground helper method).  Use the Pause/Resume/Exit/etc. methods to control the execution of this operation.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverContext.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.ReceiverId">
            <summary>Unique receiver database id</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.SerialNumber">
            <summary>Receiver serial number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.RegistryInfo">
            <summary>Driver information stored in registry</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.CurrentTransmitterId">
            <summary>Current id of transmitter associated with receiver</summary>
            <remarks>Current as of last retrieval from the receiver</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.CurrentEstimatedGlucoseRecord">
            <summary>Latest estimated glucose record found in receiver database</summary>
            <remarks>Current as of last retrieval from the receiver</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.CurrentMeterRecord">
            <summary>Latest meter record found in receiver database</summary>
            <remarks>Current as of last retrieval from the receiver</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.CurrentSettingsRecord">
            <summary>Latest settings glucose record found in receiver database</summary>
            <remarks>Current as of last retrieval from the receiver</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.CurrentInsertionTimeRecord">
            <summary>Latest insertion record found in receiver database</summary>
            <remarks>Current as of last retrieval from the receiver</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.IsValidComPort">
            <summary>
            True if virtual COM port is attached properly and ReceiverId/SerialNumber are unchanged (i.e. Receiver not swapped out for a different one.)
            False may indicate the Plug-n-play did not work properly when receiver was attached (i.e. USB detected but Virtual COM Port failed.)
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.FirmwareHeader">
            <summary>
            Cached firmware header information, read from receiver if not already cached.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.Interval">
            <summary>
            How often you want to check for new records.  Default is 5 second.  Value can not be less than 1.0 seconds.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.Tag">
            <summary>
            Any tag (object) that you want to associate with an instance.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.EstimatedGlucoseRecords">
            <summary>thread-safe cache of estimated glucose records retrieved from receiver database</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.MeterRecords">
            <summary>thread-safe cache of meter records retrieved from receiver database</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.SettingsRecords">
            <summary>thread-safe cache of settings records retrieved from receiver database</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverContext.InsertionTimeRecords">
            <summary>thread-safe cache of insertion records retrieved from receiver database</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.NewEstimatedGlucoseRecordEvent">
            <summary>fired after initial sync for each new estimated glucose record found in receiver database</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.NewMeterRecordEvent">
            <summary>fired after initial sync for each new meter found in receiver database</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.NewSettingsRecordEvent">
            <summary>fired after initial sync for each new settings record found in receiver database</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.NewInsertionTimeRecordEvent">
            <summary>fired after initial sync for each new insertion found in receiver database</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.UnhandledExceptionDuringSynchronization">
            <summary>fired during incremental read of receiver database for any exception not otherwise handled/ignored</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.DatabaseRecordsSynchronized">
            <summary>fired at the conclusion of an incremental read of the receiver database and caching of any new records found (and associated events fired)</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.InitialBackgroundSynchronizationCompleted">
            <summary>fired at the conclusion of the initial (bulk) retrieval/cache of records from a receiver database</summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverContext.PropertyChanged">
            <summary>Raised when operating state changes</summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XFirmwareHeader">
            <summary>
            
            </summary>
        </member>
        <member name="T:DexCom.Common.XObject">
            <summary>
            Summary description for XObject.
            </summary>
        </member>
        <member name="M:DexCom.Common.XObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.Common.XObject.#ctor(System.String)">
            <summary>
            Construct an XML Object by name.
            </summary>
            <param name="strName">Name of the xml object's element.</param>
        </member>
        <member name="M:DexCom.Common.XObject.#ctor(System.Xml.XmlElement)">
            <summary>
            Construct / "Attach" an XML Object to the xml element passed in.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.Common.XObject.#ctor(System.String,System.Xml.XmlDocument)">
            <summary>
            Construct an XML Object by name using a specific Xml Document as owner/creator.
            </summary>
            <param name="strName"></param>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.Common.XObject.AppendChild(DexCom.Common.XObject)">
            <summary>
            Helper method to append an XObject's element as a child into this XObject.
            </summary>
            <param name="xChildObject"></param>
        </member>
        <member name="M:DexCom.Common.XObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.XObject.FullOuterXml">
            <summary>
            Fetches the attached element's OuterXml ... but if the element is rooted as the owner doc's element 
            then the returned XML string is the OuterXml of the document which can include declarations like "encoding".
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.CreateElement(System.String)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.IsNull">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.IsNotNull">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.HasAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String)">
            <summary>
            Get the element's named attribute value.
            </summary>
            <param name="strName"></param>
            <returns>Return the attribute value as a string or null if attribute is not found.</returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsString(System.String)">
            <summary>
            Get an attribute's value converted to string.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns>Attribute value as string or throws exception if attribute not found.</returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.String@)">
            <summary>
            Get an attribute's value converted to string.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsBool(System.String)">
            <summary>
            Get an attribute's value converted to bool.
            "1" = true, "0" and "" = false.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Boolean@)">
            <summary>
            Get an attribute's value converted to bool.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsInt(System.String)">
            <summary>
            Get an attribute's value converted to int.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Int32@)">
            <summary>
            Get an attribute's value converted to int.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsUInt(System.String)">
            <summary>
            Get an attribute's value converted to uint.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.UInt32@)">
            <summary>
            Get an attribute's value converted to uint.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsUShort(System.String)">
            <summary>
            Get an attribute's value converted to ushort.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Int16@)">
            <summary>
            Get an attribute's value converted to short.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsShort(System.String)">
            <summary>
            Get an attribute's value converted to short.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.UInt16@)">
            <summary>
            Get an attribute's value converted to ushort.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsByte(System.String)">
            <summary>
            Get an attribute's value converted to byte.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Byte@)">
            <summary>
            Get an attribute's value converted to byte.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsLong(System.String)">
            <summary>
            Get an attribute's value converted to long.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Int64@)">
            <summary>
            Get an attribute's value converted to long.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsULong(System.String)">
            <summary>
            Get an attribute's value converted to ulong.
            Empty attribute value is converted to 0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.UInt64@)">
            <summary>
            Get an attribute's value converted to ulong.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsDouble(System.String)">
            <summary>
            Get an attribute's value converted to double.
            Empty attribute value is converted to 0.0.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Double@)">
            <summary>
            Get an attribute's value converted to double.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsGuid(System.String)">
            <summary>
            Get an attribute's value converted to Guid.
            Empty attribute value is Guid.Empty.
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Guid@)">
            <summary>
            Get an attribute's value converted to Guid.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsDateTime(System.String)">
            <summary>
            
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsDateTimeOffset(System.String)">
            <summary>
            
            </summary>
            <param name="strName">Name of attribute</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.DateTime@)">
            <summary>
            Get an attribute's value converted to DateTime.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.DateTimeOffset@)">
            <summary>
            Get an attribute's value converted to DateTimeOffset.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsTimeSpan(System.String)">
            <summary>
            
            </summary>
            <param name="strName">Name of attribute</param>
            <returns>Converted TimeSpan or TimeSpan.Zero if empty attribute</returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.TimeSpan@)">
            <summary>
            Get an attribute's value converted to TimeSpan.
            </summary>
            <param name="strName"></param>
            <param name="attributeValue"></param>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttributeAsEnum(System.String,System.Type)">
            <summary>
            Get an attribute's value converted to a enum.
            </summary>
            <param name="strName"></param>
            <param name="enumType"></param>
            <returns>resulting object from Enum.Parse(attribute value)</returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <param name="hintType"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetAttribute``1(System.String)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.GetXPathAttribute``1(System.String)">
            <summary>
            
            </summary>
            <param name="xPath">XPath to attribute like "Library/Book[@Title='ABC']/@Author"</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.HasXPathAttribute(System.String)">
            <summary>
            
            </summary>
            <param name="xPath">XPath to attribute like "Library/Book[@Title='ABC']/@Author"</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Object,System.Type)">
            <summary>
            Sets an attribute's value to a new value depending on object type and hint type passed in.  Handles NULL and DBNull types too.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="attrValue">Value of attribute</param>
            <param name="hintType">Type of value expected for null/DBNull values.</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.String)">
            <summary>
            Sets an attribute's value to a new string. A null string value becomes an empty "" attribute value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="strValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Boolean)">
            <summary>
            Sets an attribute's value to a boolean value converted to "0" or "1".
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="boolValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Byte)">
            <summary>
            Sets an attribute's value to a byte value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="byteValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Int16)">
            <summary>
            Sets an attribute's value to a short value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="shortValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.UInt16)">
            <summary>
            Sets an attribute's value to a ushort value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="ushortValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Int32)">
            <summary>
            Sets an attribute's value to an integer value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="intValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.UInt32)">
            <summary>
            Sets an attribute's value to an unsigned integer value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="uintValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Int64)">
            <summary>
            Sets an attribute's value to a long value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="longValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.UInt64)">
            <summary>
            Sets an attribute's value to an unsigned long value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="ulongValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Double)">
            <summary>
            Sets an attribute's value to a double value.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="doubleValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.DateTime)">
            <summary>
            Sets an attribute's value to a DateTime value converted to ISO 8601 format.
            If DateTime value equals Values.EmptyDateTime then attribute value is set to empty.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="dtValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.DateTimeOffset)">
            <summary>
            Sets an attribute's value to a DateTime value converted to ISO 8601 format.
            If DateTimeOffset value equals Values.EmptyDateTimeOffset then attribute value is set to empty.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="dtoValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.TimeSpan)">
            <summary>
            Sets an attribute's value to a TimeSpan value.
            If TimeSpan value equals TimeSpan.Zero then attribute value is set to empty.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="tsValue">New value of attribute</param>
        </member>
        <member name="M:DexCom.Common.XObject.SetAttribute(System.String,System.Guid)">
            <summary>
            Sets an attribute's value to a guid value converted with braces and upper case.
            If Guid value equals Guid.Empty then attribute value is set to empty.
            </summary>
            <param name="strName">Name of attribute</param>
            <param name="guidValue">New value of attribute</param>
        </member>
        <member name="P:DexCom.Common.XObject.TagName">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.XObject.Element">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.XObject.Xml">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.XObject.Id">
            <summary>
            Get the element's "Id" attribute as a Guid.
            </summary>
        </member>
        <member name="P:DexCom.Common.XObject.Name">
            <summary>
            Get the element's "Name" attribute.
            </summary>
        </member>
        <member name="P:DexCom.Common.XObject.Description">
            <summary>
            Get the element's "Description" attribute.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XFirmwareHeader.Tag">
            <summary>Name of XFirmwareHeader</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareHeader.#ctor">
            <summary>
            Create a brand new XFirmwareHeader
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareHeader.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XFirmwareHeader using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareHeader.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XFirmwareHeader element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareHeader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareHeader.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.ReceiverApi.ReceiverCommands">
            <summary>
            See R4 Source: DexCom.PCCommunication.PCCommType (PCCommType.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.ReceiverRecordType">
            <summary>
             See R4 Source: DexCom.DataTypes.DatabaseRecordType (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.UserEvent">
            <summary>
             See R4 Source: DexCom.DataTypes.UserEventType (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.Exercise">
            <summary>
            See R4 Source: DexCom.DataTypes.Exercise (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.Health">
            <summary>
            See R4 Source: DexCom.DataTypes.Health (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.LanguageType">
            <summary>
             See R4 Source: DexCom.DataTypes.Language (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.GlucoseUnitType">
            <summary>
             See R4 Source: DexCom.DataTypes.GlucoseUnitsSelections (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.BlindedModeType">
            <summary>
             Command Parameters
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.ClockModeType">
            <summary>
            Command Parameters
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.DeviceModeType">
            <summary>
            Command Parameters
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.BatteryState">
            <summary>
            See R4 Source: DexCom.DataTypes.BatteryState (DataTypes.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.TrendArrow">
            <summary>
            See R4 Source: DexCom.DataTypes.TrendArrow (DataTypes.cs)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.None">
            <summary>No arrow (blank)</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.DoubleUp">
            <summary>Two arrows up, greater than 3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.SingleUp">
            <summary>Arrow pointing at 12:00, between 2 and 3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.FortyFiveUp">
            <summary>Arrow pointing at 4:30, between 1 and 2mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.Flat">
            <summary>Flat arrow, between 1 and -1 mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.FortyFiveDown">
            <summary>Arrow pointing at 4:30, between -1 and -2mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.SingleDown">
            <summary>Arrow pointing at 6:00, between -2 and -3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.DoubleDown">
            <summary>Two arrows down, less than -3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.NotComputable">
            <summary>
            This is returned when the algorithm decides that it is not
            reasonable to compute trend arrow for various reasons such
            as noise etc.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.TrendArrow.RateOutOfRange">
            <summary>
            This is used when the computed filtered rate is not within the
            range for assigning the arrows.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.NoiseMode">
            <summary>
            See R4 Source: DexCom.DataTypes.NoiseMode (DataTypes.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.SensorSessionState">
            <summary>
            See R4 Source: DexCom.DataTypes.SensorShutOffReason (DataTypes.cs)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.SensorSessionState.SensorRemoved">
            <summary>User removed the sensor (i.e. pressed stop sensor on receiver)</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.SensorSessionState.SessionExpired">
            <summary>Algorithm decided that the session expired.</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.SensorSessionState.SessionStarted">
            <summary>
            This is used to create InsertionTime records while starting
            a session. In this case we are not shutting off the sensor, and
            so there is actually no shut off reason! However, using a value
            other than None seems to be better.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.SpecialGlucoseValues">
            <summary>
            See R4 Source: (NewAlgorithmEngine.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.SetUpWizardState">
            <summary>
            See R4 Source: (DataTypes.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.Alarm">
            <summary>
            See R4 Source: DexCom.PCCommunication.AlarmType (PCCommType.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.VibrateType">
            <summary>
             See R4 Source: DexCom.DataTypes.AlarmNotificationType (DataRecordEnum.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.UserProfile">
            <summary>
            See R4 Source: (DataTypes.cs)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XFirmwareSettings">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XFirmwareSettings.Tag">
            <summary>Name of XFirmwareSettings</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareSettings.#ctor">
            <summary>
            Create a brand new XFirmwareSettings
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareSettings.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XFirmwareSettings using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareSettings.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XFirmwareSettings element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareSettings.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XFirmwareSettings.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.Tools.GetLatestSupportedRecordRevision(DexCom.ReceiverApi.ReceiverRecordType)">
            <summary>
            Returns the most recent record revision number that we can support.
            </summary>
            <param name="recordType"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.Tools.IsSupportedRecordRevision(DexCom.ReceiverApi.ReceiverRecordType,System.Int32)">
            <summary>
            Determines if the record revision is supported.
            </summary>
            <param name="recordType"></param>
            <param name="revision"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.Tools.ConvertGen4TransmitterNumberToCode(System.UInt32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.Tools.ConvertGen4TransmitterCodeToNumber(System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.Tools.GetReceiverCommandStringFromByte(System.Byte)">
            <summary>
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:DexCom.Common.IProgramContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.Common.IProgramContext.AddSessionLogEntry(DexCom.Common.LogEntry)">
            <summary></summary>
            <param name="logEntry"></param>
        </member>
        <member name="M:DexCom.Common.IProgramContext.AddSessionLogEntry(System.String)">
            <summary></summary>
            <param name="message"></param>
        </member>
        <member name="M:DexCom.Common.IProgramContext.AddSessionLogEntrySync(DexCom.Common.LogEntry)">
            <summary></summary>
            <param name="logEntry"></param>
        </member>
        <member name="M:DexCom.Common.IProgramContext.AddSessionLogEntrySync(System.String)">
            <summary></summary>
            <param name="message"></param>
        </member>
        <member name="M:DexCom.Common.IProgramContext.Property``1(System.String)">
            <summary>
            Lookup a program's property;
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.IProgramContext.HasProperty(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.IProgramContext.ResourceLookup(System.String)">
            <summary></summary>
        </member>
        <member name="M:DexCom.Common.IProgramContext.ResourceLookup(System.String,System.Object[])">
            <summary></summary>
        </member>
        <member name="P:DexCom.Common.IProgramContext.ApplicationName">
            <summary></summary>
        </member>
        <member name="P:DexCom.Common.IProgramContext.ApplicationTitle">
            <summary></summary>
        </member>
        <member name="P:DexCom.Common.IProgramContext.TemporaryFolderPath">
            <summary></summary>
        </member>
        <member name="E:DexCom.Common.IProgramContext.CultureChangedEvent">
            <summary></summary>
        </member>
        <member name="T:DexCom.Common.ProgramContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.ProgramContext.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:DexCom.Common.Data.Tools">
            <summary>
            Summary description for Tools.
            </summary>
        </member>
        <member name="M:DexCom.Common.Data.Tools.ConvertBytesToObject(System.Byte[],System.Int32,System.Type)">
            <summary>
            Convert an array of bytes starting at the offset provided into the specified type (struct or class).
            </summary>
            <param name="bytes"></param>
            <param name="startOffset"></param>
            <param name="type"></param>
            <returns>Newly created object of the specified type created from bytes given. NULL on any error.</returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.ConvertObjectToBytes(System.Object)">
            <summary>
            Convert an object (struct or class) to an array of bytes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.ConvertArrayToBytes``1(``0[])">
            <summary>
            Convert an object (struct or class) to an array of bytes.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.ConvertBytesToArray``1(System.Byte[])">
            <summary>
            Convert an array of bytes to an array of objects (struct or class).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.IsBinaryXmlElement(System.Xml.XmlElement)">
            <summary>
            Determines if an xml element looks like it was created with CreateBinaryXmlElement() method.
            NOTE that this is not looking at the value of 'IsBinary' attribute ... just the existence of the expected binary attributes (Size, Crc32, IsBinary).
            </summary>
            <param name="sourceElement">Element to look at.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.ExtractBinaryXmlElement(System.Xml.XmlElement)">
            <summary>
            Extracts the binary data stored in an xml element using CreateBinaryXmlElement().
            </summary>
            <param name="sourceElement">The xml element that contains the compressed data.</param>
            <returns>Binary byte array containing stored data.</returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.CreateApplicationXmlDocument(System.String,System.Boolean)">
            <summary>
            Create an XmlDocument object with UTF8 Encoding declaration, root name as provided, 
            root "Id" attribute with new Guid value, XApplicationInfo child, XComputerInfo child, 
            and with optional digital signature.
            </summary>
            <param name="documentContents">Name of root element (the "contents") name.</param>
            <param name="addSignature">True if you want to create the document with a digital signature.</param>
            <returns>Newly created and optionally signed XML document.</returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.GetXComputerInfo(System.Xml.XmlDocument)">
            <summary>
            Returns a newly created XComputerInfo populated with information from this Computer, Environment, Versions, etc.
            </summary>
            <param name="ownerDocument">Specific document owner to create object from.</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.GetOperatingSystemKind">
            <summary>
            Returns one of "Vista" or "XP" or "7" "2008" or "2008 R2" or "2003" ... for any/all flavors of corresponding microsoft operating systems.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.DeidentifyComputerInfo(System.Xml.XmlElement)">
            <summary>
            Locates the "ComputerInfo" element(s) in the specified xml (from given node and below) and empties out the "personal" attributes: UserName, HostName, and MachineName
            ... as well as removing any relational identifiers that could track back to the user specificially: IP Address, MAC Address, other hardware IDs, etc.
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:DexCom.Common.Data.Tools.GetXComputerInfo">
            <summary>
            Returns a newly created XComputerInfo populated with information from this Computer, Environment, Versions, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.GetXApplicationInfo(System.Xml.XmlDocument)">
            <summary>
            Returns a newly created XApplicationInfo populated with information about this application.
            </summary>
            <param name="ownerDocument">Specific document owner to create object from.</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.GetXApplicationInfo">
            <summary>
            Returns a newly created XApplicationInfo populated with information about this application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.EnsureXmlRootObject(System.Xml.XmlElement)">
            <summary>
            Makes sure the specified xml element is the root of the owning document.  Will root the object in same document
            as the element if the document root is empty.  Otherwise, the element will be rooted in a new xml document.
            If rooting is requires, then XML Declaration will be inserted with the root.
            </summary>
            <param name="xRoot">Element that needs to be the root of an xml document.</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.Tools.EnsureXmlRootObject(System.Xml.XmlElement,System.Boolean)">
            <summary>
            Makes sure the specified xml element is the root of the owning document.  Will root the object in same document
            as the element if the document root is empty.  Otherwise, the element will be rooted in a new xml document.
            </summary>
            <param name="xRoot">Element that needs to be the root of an xml document.</param>
            <param name="insertXmlDeclaration">If rooting is requires, then decide if XML Declaration is inserted with root.</param>
            <returns></returns>
        </member>
        <member name="T:DexCom.ReceiverTools.Utils">
            <summary>
            Utility class that provides a variety of receiver and host-related tool methods
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.GetAssemblyVersion">
            <summary>
            Get the version number of this assembly (the Dexcom Receiver Tools DevKit).
            </summary>
            <returns>Version string.</returns>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.ScanForAttachedReceivers">
            <summary>
            Scans the registry for evidence of currently attached receivers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.IsDriverInstalled">
            <summary>
            Determines if the receiver device driver is installed
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.IsEvidenceOfReceiverEverAttached">
            <summary>
            Determines if a receiver has ever been attached to the host PC
            </summary>
            <returns></returns>
            <remarks>Suitable for invocation after installation of the driver, as a way to prompt the user to
            manually detach and reattach a receiver that was attached prior to driver installation</remarks>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.IsAdministrator">
            <summary>
            Checks if the currently logged in MS Windows account is a member of the Adminstrators group.
            NOTE: You must call 'AppDomain.CurrentDomain.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal)' somewhere early like in the Main() entry point for this method to work.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.IsReallyAdministrator">
            <summary>
            Checks to see if the currently logged in MS Windows account can be elevated to run with Adminstrator permission ... 
            i.e. UAC is turned on in Vista/Win7 but user really is an admin even if not currently elevated.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.RunDriverSetup(System.Boolean)">
            <summary>
            Automatically extracts the appropriate driver setup (64bit vs 32bit), copies it to a temporary location, runs it, and waits for it to finish.
            </summary>
            <param name="runAsRequested">If true then the verb "runas" is requested when running the installer which causes MS Windows to prompt for alternate credentials or run as administrator.  Useful for Vista/Win7 when running UAC.</param>
            <exception cref="T:System.SystemException"></exception>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.ExtractDriverSetup(System.String@,System.Byte[]@)">
            <summary>
            Extracts the filename and bytes (of the binary .exe file) for the appropriate driver setup (64bit vs 32bit).
            </summary>
            <param name="filename"></param>
            <param name="executable"></param>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.InternetTimeOffset(System.Boolean@)">
            <summary>
            Obtains the local clock offset from pooled internet time servers.
            </summary>
            <param name="isConnected"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverTools.Utils.InternetTime">
            <summary>
            Returns the local clock adjusted accurately to internet time.  Will throw an exception if unable to connect to internet pooled time servers.
            </summary>
            <returns></returns>
            <exception cref="T:DexCom.Common.DexComException"/>
        </member>
        <member name="T:DexCom.ReceiverApi.XPageHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XPageHeader.Tag">
            <summary>Name of XPageHeader</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPageHeader.#ctor">
            <summary>
            Create a brand new XPageHeader
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPageHeader.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XPageHeader using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPageHeader.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XPageHeader element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPageHeader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPageHeader.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.Common.OnlineGuidConverter">
            <summary>
            Summary description for OnlineGuidConverter.
            </summary>
        </member>
        <member name="M:DexCom.Common.OnlineGuidConverter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.Common.OnlineGuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Override for base GuidConverter that converts a guid to the Online standard string for guids (i.e. upper case with braces).
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:DexCom.Common.AssemblyUtils">
            <summary>
            Fetches AssemblyXXXAttribute values from the GetEntryAssembly() assembly.
            
            From http://www.c-sharpcorner.com/UploadFile/ravesoft/Page112282007015536AM/Page1.aspx 
            </summary>
        </member>
        <member name="P:DexCom.Common.AssemblyUtils.Version">
            <summary>
            The assembly version ... not to be confused with the "pretty" File Version.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.IGenericReceiverRecord">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.IGenericReceiverRecord.SystemTimeStamp">
            <summary>
            Returns the UTC/GMT TimeStamp from the record's timestamp (milliseconds since 1-1-2008)
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.DatabasePageHeader">
            <summary>
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverManufacturingParameterRecord.RecordType">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverManufacturingParameterRecord.RecordedCrc">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverManufacturingParameterRecord.RecordSize">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverManufacturingParameterRecord.SystemTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverManufacturingParameterRecord.DisplayTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverEGVRecord.RecordType">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverEGVRecord.RecordedCrc">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverEGVRecord.RecordSize">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverEGVRecord.SystemTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverEGVRecord.DisplayTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverInsertionTimeRecord.RecordType">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverInsertionTimeRecord.RecordedCrc">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverInsertionTimeRecord.RecordSize">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverInsertionTimeRecord.SystemTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverInsertionTimeRecord.DisplayTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverMeterRecord.RecordType">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverMeterRecord.RecordedCrc">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverMeterRecord.RecordSize">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverMeterRecord.SystemTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverMeterRecord.DisplayTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverUserEventRecord.RecordType">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverUserEventRecord.RecordedCrc">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverUserEventRecord.RecordSize">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverUserEventRecord.SystemTimeStamp">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverUserEventRecord.DisplayTimeStamp">
            <summary></summary>
        </member>
        <member name="T:DexCom.ReceiverApi.PacketTools">
            <summary>
            Packet helper to compose byte[] from arguments.
            Packet is defined ==> (1 byte SOF, 2 bytes total packet length, 1 byte Command Type, N-Bytes Payload, 2 bytes CRC)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.PacketTools.Packet">
            <summary>
            A single *static* packet buffer which can be used for composing a request/response packet up to a max packet size.
            Take care to copy the contents if calling code would compete with or cause an overwrite to buffer before completed.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.ClearPacket">
            <summary>
            Clear out (zero) the static packet buffer.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.NewCopyOfPacket">
            <summary>
            Makes a copy (new byte[]) of the static buffer using the 'composed' packet's length.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.StoreBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Store short into byte array (little endian) at offset.
            </summary>
            <param name="value"></param>
            <param name="targetData"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.StoreBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Store ushort into byte array (little endian) at offset.
            </summary>
            <param name="value"></param>
            <param name="targetData"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.StoreBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Store int into byte array (little endian) at offset.
            </summary>
            <param name="value"></param>
            <param name="targetData"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.StoreBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Store uint into byte array (little endian) at offset.
            </summary>
            <param name="value"></param>
            <param name="targetData"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.StoreBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Store long into byte array (little endian) at offset.
            </summary>
            <param name="value"></param>
            <param name="targetData"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.StoreBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Store ulong into byte array (little endian) at offset.
            </summary>
            <param name="value"></param>
            <param name="targetData"></param>
            <param name="targetOffset"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands)">
            <summary>
            Compose a packet with command into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Byte)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Int16)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.UInt16)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Int32)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.UInt32)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Int64)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.UInt64)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Byte,System.UInt32)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload1"></param>
            <param name="payload2"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Byte,System.UInt32,System.Byte)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload1"></param>
            <param name="payload2"></param>
            <param name="payload3"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.PacketTools.DoComposePacket(System.Byte[],DexCom.ReceiverApi.ReceiverCommands,System.Byte[],System.Int32)">
            <summary>
            Compose a packet with command and payload into the supplied buffer and returns packet length.
            </summary>
            <param name="packet"></param>
            <param name="command"></param>
            <param name="payload"></param>
            <param name="payloadLength"></param>
            <returns></returns>
        </member>
        <member name="P:DexCom.ReceiverApi.PacketTools.PacketLength">
            <summary>
            Fetches the ushort packet length from the static response buffer.
            </summary>
        </member>
        <member name="M:CSUACSelfElevation.UacSelfEvaluation.IsUserInAdminGroup">
            <summary> 
            The function checks whether the primary access token of the process belongs  
            to user account that is a member of the local Administrators group, even if  
            it currently is not elevated. 
            </summary> 
            <returns> 
            Returns true if the primary access token of the process belongs to user  
            account that is a member of the local Administrators group. Returns false  
            if the token does not. 
            </returns> 
            <exception cref="T:System.ComponentModel.Win32Exception"> 
            When any native Windows API call fails, the function throws a Win32Exception  
            with the last error code. 
            </exception> 
        </member>
        <member name="T:CSUACSelfElevation.TOKEN_INFORMATION_CLASS">
            <summary>
            The TOKEN_INFORMATION_CLASS enumeration type contains values that 
            specify the type of information being assigned to or retrieved from 
            an access token.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.WELL_KNOWN_SID_TYPE">
            <summary>
            The WELL_KNOWN_SID_TYPE enumeration type is a list of commonly used 
            security identifiers (SIDs). Programs can pass these values to the 
            CreateWellKnownSid function to create a SID from this list.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.SECURITY_IMPERSONATION_LEVEL">
            <summary>
            The SECURITY_IMPERSONATION_LEVEL enumeration type contains values 
            that specify security impersonation levels. Security impersonation 
            levels govern the degree to which a server process can act on behalf 
            of a client process.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.TOKEN_ELEVATION_TYPE">
            <summary>
            The TOKEN_ELEVATION_TYPE enumeration indicates the elevation type of 
            token being queried by the GetTokenInformation function or set by 
            the SetTokenInformation function.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.SID_AND_ATTRIBUTES">
            <summary>
            The structure represents a security identifier (SID) and its 
            attributes. SIDs are used to uniquely identify users or groups.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.TOKEN_ELEVATION">
            <summary>
            The structure indicates whether a token has elevated privileges.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.TOKEN_MANDATORY_LABEL">
            <summary>
            The structure specifies the mandatory integrity level for a token.
            </summary>
        </member>
        <member name="T:CSUACSelfElevation.SafeTokenHandle">
            <summary>
            Represents a wrapper class for a token handle.
            </summary>
        </member>
        <member name="F:CSUACSelfElevation.NativeMethods.BCM_SETSHIELD">
            <summary>
            Sets the elevation required state for a specified button or 
            command link to display an elevated icon. 
            </summary>
        </member>
        <member name="M:CSUACSelfElevation.NativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,CSUACSelfElevation.SafeTokenHandle@)">
            <summary>
            The function opens the access token associated with a process.
            </summary>
            <param name="hProcess">
            A handle to the process whose access token is opened.
            </param>
            <param name="desiredAccess">
            Specifies an access mask that specifies the requested types of 
            access to the access token. 
            </param>
            <param name="hToken">
            Outputs a handle that identifies the newly opened access token 
            when the function returns.
            </param>
            <returns></returns>
        </member>
        <member name="M:CSUACSelfElevation.NativeMethods.DuplicateToken(CSUACSelfElevation.SafeTokenHandle,CSUACSelfElevation.SECURITY_IMPERSONATION_LEVEL,CSUACSelfElevation.SafeTokenHandle@)">
            <summary>
            The function creates a new access token that duplicates one 
            already in existence.
            </summary>
            <param name="ExistingTokenHandle">
            A handle to an access token opened with TOKEN_DUPLICATE access.
            </param>
            <param name="ImpersonationLevel">
            Specifies a SECURITY_IMPERSONATION_LEVEL enumerated type that 
            supplies the impersonation level of the new token.
            </param>
            <param name="DuplicateTokenHandle">
            Outputs a handle to the duplicate token. 
            </param>
            <returns></returns>
        </member>
        <member name="M:CSUACSelfElevation.NativeMethods.GetTokenInformation(CSUACSelfElevation.SafeTokenHandle,CSUACSelfElevation.TOKEN_INFORMATION_CLASS,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            The function retrieves a specified type of information about an 
            access token. The calling process must have appropriate access 
            rights to obtain the information.
            </summary>
            <param name="hToken">
            A handle to an access token from which information is retrieved.
            </param>
            <param name="tokenInfoClass">
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated 
            type to identify the type of information the function retrieves.
            </param>
            <param name="pTokenInfo">
            A pointer to a buffer the function fills with the requested 
            information.
            </param>
            <param name="tokenInfoLength">
            Specifies the size, in bytes, of the buffer pointed to by the 
            TokenInformation parameter. 
            </param>
            <param name="returnLength">
            A pointer to a variable that receives the number of bytes needed 
            for the buffer pointed to by the TokenInformation parameter. 
            </param>
            <returns></returns>
        </member>
        <member name="M:CSUACSelfElevation.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The function 
            calls the window procedure for the specified window and does not 
            return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">
            Handle to the window whose window procedure will receive the 
            message.
            </param>
            <param name="Msg">Specifies the message to be sent.</param>
            <param name="wParam">
            Specifies additional message-specific information.
            </param>
            <param name="lParam">
            Specifies additional message-specific information.
            </param>
            <returns></returns>
        </member>
        <member name="M:CSUACSelfElevation.NativeMethods.GetSidSubAuthority(System.IntPtr,System.UInt32)">
            <summary>
            The function returns a pointer to a specified subauthority in a 
            security identifier (SID). The subauthority value is a relative 
            identifier (RID).
            </summary>
            <param name="pSid">
            A pointer to the SID structure from which a pointer to a 
            subauthority is to be returned.
            </param>
            <param name="nSubAuthority">
            Specifies an index value identifying the subauthority array 
            element whose address the function will return.
            </param>
            <returns>
            If the function succeeds, the return value is a pointer to the 
            specified SID subauthority. To get extended error information, 
            call GetLastError. If the function fails, the return value is 
            undefined. The function fails if the specified SID structure is 
            not valid or if the index value specified by the nSubAuthority 
            parameter is out of bounds.
            </returns>
        </member>
        <member name="T:DexCom.ReceiverApi.UsbComPort">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.#ctor(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.ToString">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.Reconnect">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.AquireExclusiveUse(System.TimeSpan)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.ReleaseExclusiveUse">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.CheckDisposed">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.Finalize">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.Dispose">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.Cleanup">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.LookupPort(System.Int32)">
            <summary>
            Locate a UsbComPort for a specific port number.
            </summary>
            <param name="portNumber"></param>
            <returns>new UsbComPort only if port number is currently connected to a virtual port device. Null if port not found or not connected.</returns>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.LookupPort">
            <summary>
            Locate the first available UsbComPort.
            </summary>
            <returns>A new UsbComPort for the first port that is connected to a virtual port device. Null if no ports found or none connected.</returns>
        </member>
        <member name="M:DexCom.ReceiverApi.UsbComPort.LookupReceiverComPortList">
            <summary>
            Return a list of COM port numbers that have DexCom receivers attached.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DexCom.ReceiverApi.UsbComPort.DeviceName">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.UsbComPort.PortName">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.UsbComPort.PortNumber">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.UsbComPort.IsConnected">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.UsbComPort.IsMutexCreator">
            <summary></summary>
        </member>
        <member name="E:DexCom.ReceiverApi.UsbComPort.Detached">
            <summary></summary>
        </member>
        <member name="E:DexCom.ReceiverApi.UsbComPort.Attached">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.UsbComPort.IsDisposed">
            <summary></summary>
        </member>
        <member name="T:DexCom.ReceiverApi.UsbComPort.UsbComPortEventHandler">
            <summary></summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XManufacturingParameterRecord">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XManufacturingParameterRecord.Tag">
            <summary>Name of XManufacturingParameterRecord</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XManufacturingParameterRecord.#ctor">
            <summary>
            Create a brand new XManufacturingParameterRecord
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XManufacturingParameterRecord.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XManufacturingParameterRecord using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XManufacturingParameterRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XManufacturingParameterRecord element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XManufacturingParameterRecord.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XManufacturingParameterRecord.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.Common.LongRunningOperationState">
            <summary>
            Operational states
            </summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Unknown">
            <summary>Default</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Ready">
            <summary>Ready (to run)</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Starting">
            <summary>Starting (to run)</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Running">
            <summary>Running (started)</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Pausing">
            <summary>Pausing</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Paused">
            <summary>Paused</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Resuming">
            <summary>Resuming (to run)</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Exiting">
            <summary>Exiting (from running)</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Exited">
            <summary>Exited (from running, not ready to run)</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Aborting">
            <summary>Aborting</summary>
        </member>
        <member name="F:DexCom.Common.LongRunningOperationState.Aborted">
            <summary>Aborted (not ready to run)</summary>
        </member>
        <member name="T:DexCom.Common.OperationStateChangedEventArgs">
            <summary>
            Payload sent with operation state change event
            </summary>
        </member>
        <member name="M:DexCom.Common.OperationStateChangedEventArgs.#ctor(System.DateTime,DexCom.Common.LongRunningOperationState,DexCom.Common.LongRunningOperationState)">
            <summary>Creates event payload</summary>
        </member>
        <member name="P:DexCom.Common.OperationStateChangedEventArgs.TimeStamp">
            <summary>Indicates when state transition occurred</summary>
        </member>
        <member name="P:DexCom.Common.OperationStateChangedEventArgs.PriorState">
            <summary>Previous operating state</summary>
        </member>
        <member name="P:DexCom.Common.OperationStateChangedEventArgs.CurrentState">
            <summary>Current operating state</summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XPartition">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XPartition.Tag">
            <summary>Name of XPartition</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartition.#ctor">
            <summary>
            Create a brand new XPartition
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartition.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XPartition using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartition.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XPartition element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.ReceiverApi.ReceiverApi">
            <summary>
            ReceiverApi is the interface for communicating with a DexCom R4 Receiver.
            </summary>
            <summary>
            ReceiverApi is the interface for communicating with a DexCom R4 Receiver.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.ReadTransmitterId">
            <summary>
            Reads the receiver's transmitter id string ("Code")
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.ReadDeviceMode">
            <summary>
            Reads the device's (manufacturing) mode.  
            To date: 1 = Manufacturing mode, 0 = Commercial mode (Not in manufacturing mode)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.EraseDatabase">
            <summary>
            Sends the EraseDatabase command, which the receiver will erase (all but manufacturing and firmware parameter partitions) and then auto-reset.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.ReadLatestSettingsAsXml">
            <summary>
            Read the available settings from the receiver using only individual commands and not attempting to parse the settings record directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.ReadReceiverSerialNumber">
            <summary>
            Fetch the receiver's serial number from the XML ManufacturingData record.
            NOTE: Would be nice if receiver had this command for performance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:DexCom.ReceiverApi.ReceiverApi.ImplementedApiVersion">
            <summary>
            Compatible with Firmware Api Version 2.2.0.0 and Test Api Version 2.4.0.0
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.#ctor">
            <summary>
            Create receiver API attached to a receiver if found after searching com ports.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.#ctor(DexCom.ReceiverApi.UsbComPort)">
            <summary>
            Create receiver API attached to the specified com port.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.AddBytesWrittenEventHandler(DexCom.ReceiverApi.BytesTransferredEventHandler)">
            <summary>
            Register a method that will be called for all bytes written to port.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.RemoveBytesWrittenEventHandler(DexCom.ReceiverApi.BytesTransferredEventHandler)">
            <summary>
            Unregister a method that will be called for all bytes written to port.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.AddBytesReadEventHandler(DexCom.ReceiverApi.BytesTransferredEventHandler)">
            <summary>
            Register a method that will be called for all bytes read from port.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.RemoveBytesReadEventHandler(DexCom.ReceiverApi.BytesTransferredEventHandler)">
            <summary>
            Unregister a method that will be called for all bytes read from port.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.AttachReceiver">
            <summary>
            Find a receiver on a virtual USB/COM port, or reattach to prior receiver port.
            </summary>
            <returns>True if able to locate receiver port.</returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.AttachReceiver(DexCom.ReceiverApi.UsbComPort)">
            <summary>
            Attach a receiver to a specific virtual USB/COM port, or reattach to prior receiver port.
            </summary>
            <param name="usbPort"></param>
            <returns>True if able to locate receiver port.</returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.FindPortWithReceiver">
            <summary>
            Searches for the first Silicon Labs virtual COM port with a receiver attached.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.FindPortWithReceiver(System.Int32)">
            <summary>
            Searches for a Silicon Labs virtual COM port with a receiver attached ... starting the search with the specified port number.
            </summary>
            <param name="startingPortNumber"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.IsReceiverOnPort(System.Int32)">
            <summary>
            
            </summary>
            <param name="portNumber"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.WaitForReceiverOnPort(System.Int32,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="portNumber"></param>
            <param name="timeToWait"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.Disconnect">
            <summary>
            Close the port.  NOTE: You must still dispose of the API too.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.Connect">
            <summary>
            Attempt to connect or reconnect passively (no reset) to receiver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.Connect(System.Boolean@)">
            <summary>
            Attempt to connect or reconnect passivly (no reset) to receiver.
            Will let you know if connected and if receiver attached.
            </summary>
            <param name="isReceiverAttached"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.VerifyApiVersion">
            <summary>
            Must have been connected to receiver.  Will compare current implementation of PC API with Receiver API.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.ReadGenericCommandPacket(System.TimeSpan)">
            <summary>
            Fetches a receiver response packet and return payload or a (non-null) empty byte[] if no payload ... if packet is well formed with SOF and correct CRC.
            </summary>
            <param name="maxWait"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.ReadGenericCommandPacket(System.TimeSpan,System.Byte@)">
            <summary>
            Fetches a receiver response packet and return payload or a (non-null) empty byte[] if no payload ... if packet is well formed with SOF and correct CRC.
            </summary>
            <param name="maxWait"></param>
            <param name="commandId"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.CheckDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverApi.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverApi.PortName">
            <summary>
            The attached port's name (i.e. "COM3") or empty if not connected to a port.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverApi.PortDeviceName">
            <summary>
            The attached port's device name (i.e. "\Device\USBSER000") or empty if not connected to a port.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverApi.PortNumber">
            <summary>
            The attached port's device number (i.e. 3 for "COM3") or 0 if not connected to a port.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverApi.CachedFirmwareHeader">
            <summary>
            Returns the cached FirmwareHeader or fetches it if not cached yet.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverApi.IsReceiverAttached">
            <summary>
            Is a receiver (virtual USB/COM port) around.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverApi.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="T:DexCom.Common.LogEntryCategory">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Unknown">
            <summary>Unknown Log Entry Category</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Debug">
            <summary>Debug only message.</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Information">
            <summary>Information or General Message</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Warning">
            <summary>Warning Message</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Error">
            <summary>Error Message</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Comment">
            <summary>Comment Message</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Trace">
            <summary>Application Trace Message</summary>
        </member>
        <member name="F:DexCom.Common.LogEntryCategory.Exception">
            <summary>Application Exception Message</summary>
        </member>
        <member name="T:DexCom.Common.LogEntry">
            <summary>
            Summary description for LogEntry.
            </summary>
        </member>
        <member name="M:DexCom.Common.LogEntry.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.Common.LogEntry.#ctor(System.String)">
            <summary>
            Create an Information Message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DexCom.Common.LogEntry.#ctor(DexCom.Common.LogEntryCategory,System.String)">
            <summary>
            
            </summary>
            <param name="category"></param>
            <param name="message"></param>
        </member>
        <member name="M:DexCom.Common.LogEntry.#ctor(DexCom.Common.LogEntryCategory,System.String,System.UInt32)">
            <summary>
            
            </summary>
            <param name="category"></param>
            <param name="message"></param>
            <param name="code"></param>
        </member>
        <member name="M:DexCom.Common.LogEntry.ToXml">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.LogEntry.ToXml(System.Xml.XmlDocument)">
            <summary>
            
            </summary>
            <param name="ownerDoc"></param>
            <returns></returns>
        </member>
        <member name="P:DexCom.Common.LogEntry.Content">
            <summary>
            Optional custom XML content to be appended as a child element of LogEntry.
            </summary>
        </member>
        <member name="P:DexCom.Common.LogEntry.FileName">
            <summary></summary>
        </member>
        <member name="P:DexCom.Common.LogEntry.LineNumber">
            <summary></summary>
        </member>
        <member name="P:DexCom.Common.LogEntry.MethodName">
            <summary></summary>
        </member>
        <member name="P:DexCom.Common.LogEntry.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.LogEntry.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.LogEntry.Message">
            <summary>
            
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.Win32PortIO">
            <summary>
            Summary description for Win32PortIO.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Win32PortIO.SOH">
            <summary>0x01</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Win32PortIO.STX">
            <summary>0x02</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Win32PortIO.EOT">
            <summary>0x04</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Win32PortIO.ACK">
            <summary>0x06</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Win32PortIO.NAK">
            <summary>0x15</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Win32PortIO.CAN">
            <summary>0x18</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.Win32PortIO.FlushPort(System.IntPtr)">
            <summary>
            Flush the comm port receive buffer.
            </summary>
            <param name="hPort"></param>
        </member>
        <member name="T:DexCom.ReceiverApi.Win32PortIO.COMMTIMEOUTS">
            Currently the only set fields are ReadTotalTimeoutConstant
        </member>
        <member name="T:DexCom.Common.AsynchronousQueue`1">
            <summary>
            Generic thread-safe double-ended queue class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.#ctor">
            <summary>
            Creates an empty queue
            </summary>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an initial queue by copying the contents of <paramref name="collection"/>
            </summary>
            <param name="collection"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.#ctor(System.Int32)">
            <summary>
            Creates an empty queue with an initial capacity of <paramref name="capacity"/> items
            </summary>
            <param name="capacity"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Clear">
            <summary>
            Removes all items from queue
            </summary>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Contains(`0)">
            <summary>
            Determines if queue contains a particular item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire contents (in order) to a specific array.
            </summary>
            <param name="array">Destination array</param>
            <param name="arrayIndex">Starting index in destination array where to insert copied contents</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.CopyToArray">
            <summary>
            Copies the entire contents (in order) to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.CopyToArray(System.Int32)">
            <summary>
            Copies the contents (in order) to an array starting at specified logical index.
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Remove">
            <summary>
            Pops first item off of the queue
            </summary>
            <returns>Firstm item in queue</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Remove(System.Int32)">
            <summary>
            Remove 0..n values up to the size of the queue.
            </summary>
            <param name="howMany"></param>
            <returns>New size of the queue.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Add(`0)">
            <summary>
            Pushes item onto end of queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.GetElement(System.Int32)">
            <summary>
            Retrieves the item in queue at the specified (absolute) index
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.GetEnumerator">
            <summary>
            Generates an enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.GetFirst">
            <summary>
            Get the oldest queued item.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.GetLast">
            <summary>
            Get the most recent queued item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.GetAtLogicalIndex(System.Int32)">
            <summary>
            Returns the item found at the specified (logical) position in queue
            </summary>
            <param name="logicalIndex"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.ToArray">
            <summary>
            Copies the contents (in order) to an array
            </summary>
            <returns>Array of queue contents</returns>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.TrimExcess">
            <summary>
            Removes extra storage capacity in queue
            </summary>
            <remarks>No trimming occurrs if queue is using 90% or more of its current capacity</remarks>
        </member>
        <member name="P:DexCom.Common.AsynchronousQueue`1.LogicalFirstIndex">
            <summary>
            Logical index of first item in the collection.
            </summary>
        </member>
        <member name="P:DexCom.Common.AsynchronousQueue`1.LogicalLastIndex">
            <summary>
            Logical "Tail" value ... this is the next insertion point, NOT the index of the last item.  For example: use LogicalLastIndex-1 for last item.
            </summary>
        </member>
        <member name="P:DexCom.Common.AsynchronousQueue`1.Count">
            <summary>
            Number of items in queue
            </summary>
        </member>
        <member name="T:DexCom.Common.AsynchronousQueue`1.Enumerator">
            <summary>
            Represents enumerator for AsynchronousQueue class
            </summary>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Enumerator.Dispose">
            <summary>
            Resets current item referred to by enumerator
            </summary>
        </member>
        <member name="M:DexCom.Common.AsynchronousQueue`1.Enumerator.MoveNext">
            <summary>
            Moves to next item in queue
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:DexCom.Common.AsynchronousQueue`1.Enumerator.Current">
            <summary>
            Returns current item reference by the enumerator
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:DexCom.Common.Data.XApplicationInfo">
            <summary>
            Summary description for XApplicationInfo.
            </summary>
        </member>
        <member name="F:DexCom.Common.Data.XApplicationInfo.Tag">
            <summary>Name of XApplicationInfo</summary>
        </member>
        <member name="M:DexCom.Common.Data.XApplicationInfo.#ctor">
            <summary>
            Create a brand new XApplicationInfo
            </summary>
        </member>
        <member name="M:DexCom.Common.Data.XApplicationInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XApplicationInfo using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.Common.Data.XApplicationInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            Create a brand new XApplicationInfo using a specific XmlElement.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.Common.Data.XApplicationInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.Data.XApplicationInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DexCom.Common.Data.XApplicationInfo.ExecutablePath">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XApplicationInfo.StartupPath">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XApplicationInfo.ProductName">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XApplicationInfo.ProductVersion">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XApplicationInfo.AssemblyVersion">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XApplicationInfo.AssemblyFileVersion">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="T:DexCom.Common.Values">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.Common.Values.NoneId">
            <summary>A static guid that represents "None".</summary>
        </member>
        <member name="F:DexCom.Common.Values.AllId">
            <summary>A static guid that represents "All".</summary>
        </member>
        <member name="F:DexCom.Common.Values.AnyId">
            <summary>A static guid that represents "Any".</summary>
        </member>
        <member name="F:DexCom.Common.Values.EmptyDateTime">
            <summary>The server representation of an empty DateTime value type.  Usefull in XML attrs and database IO.</summary>
        </member>
        <member name="F:DexCom.Common.Values.EmptyDateTimeOffset">
            <summary>The server representation of an empty DateTimeOffset value type.  Usefull in XML attrs and database IO.</summary>
        </member>
        <member name="F:DexCom.Common.Values.EmptyTimeSpan">
            <summary>The server representation of an empty TimeSpan value type.  Usefull in XML attrs and database IO.</summary>
        </member>
        <member name="T:DexCom.Common.DexComException">
            <summary>
            Custom application exception
            </summary>
        </member>
        <member name="M:DexCom.Common.DexComException.#ctor">
            <summary>
            DexCom Exception
            </summary>
        </member>
        <member name="M:DexCom.Common.DexComException.#ctor(System.String)">
            <summary>
            DexCom exception with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DexCom.Common.DexComException.#ctor(System.String,System.Exception)">
            <summary>
            DexCom exception with message and innerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DexCom.Common.DexComException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.DexComException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.Common.TimedOutException">
            <summary>
            Specialized <see cref="T:DexCom.Common.DexComException"/>
            </summary>
        </member>
        <member name="M:DexCom.Common.TimedOutException.#ctor">
            <summary>
            DexCom Exception
            </summary>
        </member>
        <member name="M:DexCom.Common.TimedOutException.#ctor(System.String)">
            <summary>
            DexCom exception with message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:DexCom.Common.TimedOutException.#ctor(System.String,System.Exception)">
            <summary>
            DexCom exception with message and innerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:DexCom.Common.TimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.TimedOutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.Common.Data.XComputerInfo">
            <summary>
            Summary description for XComputerInfo.
            </summary>
        </member>
        <member name="F:DexCom.Common.Data.XComputerInfo.Tag">
            <summary>Name of XComputerInfo</summary>
        </member>
        <member name="M:DexCom.Common.Data.XComputerInfo.#ctor">
            <summary>
            Create a brand new XComputerInfo
            </summary>
        </member>
        <member name="M:DexCom.Common.Data.XComputerInfo.Deidentify">
            <summary>
            Empties out the "personal" attributes: UserName, HostName, and MachineName
            ... as well as removing any relational identifiers that could track back to
            the user specificially: IP Address, MAC Address, other hardware IDs, etc. 
            </summary>
        </member>
        <member name="M:DexCom.Common.Data.XComputerInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XComputerInfo using a specific XmlDocument.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.Common.Data.XComputerInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            Create a brand new XComputerInfo using a specific XmlElement.
            </summary>
            <param name="otherElement"></param>
        </member>
        <member name="M:DexCom.Common.Data.XComputerInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.Data.XComputerInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.HostName">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.HostIp">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.MACAddress">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.HardwareId">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.DriveId">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.MachineName">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.OSDirectory">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.OSArchitecture">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.VolumeId">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.OSVersion">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.ClrVersion">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.UserDomainName">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XComputerInfo.UserName">
            <summary>
            ---tbd---
            </summary>
        </member>
        <member name="T:DexCom.ReceiverTools.ReceiverScanner">
            <summary>
            Provides means to automatically detect receivers attached/detached to/from host. A <see cref="T:DexCom.ReceiverTools.ReceiverContext"/> is created for each receiver detected.
            </summary>
            <remarks>Recommended practice is to instantiate only one scanner for client application instance</remarks>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.ClearAllEventsBeforeExit">
            <summary>
             Call this to manually clear out all event listeners (subscribers) so that we avoid extraneous/unwanted events that might fire during shutdown/exit.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.RunInBackground">
            <summary>
            Helps launch the Run() method on a background thread.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.Run">
            <summary>
            Continually scans for attached/detached receivers.  Takes care of creating new receiver contexts as needed and notifying when an old context is invalid/detached.
            Normally called from a background thread (see RunInBackground helper method).  Use the Pause/Resume/Exit/etc. methods to control the execution of this operation.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.DoWorkDetectingReceivers">
            <summary>
            Internal work that is performed when we're not paused.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverTools.ReceiverScanner.Cleanup">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverScanner.Interval">
            <summary>
            How often you want to check for attached/detached receivers.  Default is 1 second.  Lower limit is 1/2 second.
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.ReceiverScanner.Tag">
            <summary>
            Any tag (object) that you want to associate with this an instance.
            </summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverScanner.ReceiverContextCreatedEvent">
            <summary>
            Event is fired when a new receiver context is created because a receiver was attached to the computer.
            </summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverScanner.ReceiverContextRemovedEvent">
            <summary>
            Event is fired when a previous receiver context is removed because the receiver was detached from the computer.
            </summary>
        </member>
        <member name="E:DexCom.ReceiverTools.ReceiverScanner.UnhandledExceptionDuringScanning">
            <summary>
            Event is fired when an unhandled exception is caught during while running
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XPCParameterRecord">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XPCParameterRecord.Tag">
            <summary>Name of XPCParameterRecord</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPCParameterRecord.#ctor">
            <summary>
            Create a brand new XPCParameterRecord
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPCParameterRecord.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XPCParameterRecord using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPCParameterRecord.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XPCParameterRecord element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPCParameterRecord.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPCParameterRecord.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.Common.EventUtils">
            <summary>
            Summary description for EventUtils.
            </summary>
        </member>
        <member name="M:DexCom.Common.EventUtils.FireEvent(System.Delegate,System.Object[])">
            <summary>
            Invoke a delegate/event synchronously and wait on all subscribers. Exceptions will be ignored and NOT re-thrown.
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:DexCom.Common.EventUtils.FireEventWithExceptions(System.Delegate,System.Object[])">
            <summary>
            Invoke a delegate/event synchronously and wait on all subscribers. Exceptions will be re-thrown.  Exceptions may cause some subscribers to be skipped.
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="M:DexCom.Common.EventUtils.FireEventAsync(System.Delegate,System.Object[])">
            <summary>
            Invoke a delegate/event asynchronously to all subscribers. Exceptions will be ignored and NOT re-thrown.
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.ReceiverBaseDateTime">
            <summary>The base date time of Global Receiver (2009-1-1)/// </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TransmitterIdValidChars">
            <summary>
            Valid = "0123456789ABCDEFGHJKLMNPQRSTUWXY", Invalid: I, O, V, Z
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TransmitterIdInvalidChars">
            <summary>
            Valid = "0123456789ABCDEFGHJKLMNPQRSTUWXY", Invalid: I, O, V, Z
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.ComPortNamePrefix">
            <summary>
            String prefix for serial communications port ... "COM"
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.MatchAnythingReceiverRecordTypeFlags">
            <summary>
            All currently defined receiver record types and unknown future record types too (i.e. "Matches Anything" flags = 0xFFFFFFFF)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.AllKnownReceiverRecords">
            <summary>
            All currently defined receiver record types.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.CommercialReceiverRecords">
            <summary>
            Typical "commercial" receiver record types downloaded outside DexCom (i.e. In DataManager application.)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.EmptySensorInsertionTime">
            <summary>
            2/7/2145 6:28:15 AM	(i.e. 0xFFFFFFFF seconds since ReceiverBaseTime) ... the date/time for Insertion records that indicates a "Not Inserted" time.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TransmitterIntervalMinutes">
            <summary>5 Minutes</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TransmitterIntervalMsec">
            <summary>5 Minutes (5*60*1000 ms)</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TransmitterMinimumGapMsec">
            <summary>6 Minutes (6*60*1000 ms)</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TrendArrowMask">
            <summary>Lower Nibble (0x0F)</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.NoiseMask">
            <summary>High Nibble (less high bit) (0x70)</summary>
        </member>
        <member name="T:DexCom.ReceiverApi.Values.TinyBooterModeAddresses">
            <summary>
            These addresses are relative to the beginning of the entire dataflash
            as opposed to the beginning of the FILESYSTEM. When we communicate with the
            tiny booter (as with MFDeploy), we need to use these addresses.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TinyBooterModeAddresses.BootModeStatusByteAddress">
            <summary>
            BootModeStatusByteAddress is the byte address where boot mode status is stored.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TinyBooterModeAddresses.FileSystemStartByteAddress">
            <summary>
            FileSystemStartAddress is the first byte in the files system part on the data flash in which
            the database and all the fw upgrade staging data are stored.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.Values.TinyBooterModeAddresses.TotalDataFlashSizeBytes">
            <summary>
            TotalDataFlashSizeBytes is the number of bytes in the dataflash. This includes the code part and
            the file system part. This is the size used while extracting the binary image from Samba.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.Values.FirmwareAppModeAddresses">
            <summary>
            This is relative to the start of the FILESYSTEM. When we communicate with the
            firmware application, we need to use these addresses.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XPartitionInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XPartitionInfo.Tag">
            <summary>Name of XPartitionInfo</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartitionInfo.#ctor">
            <summary>
            Create a brand new XPartitionInfo
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartitionInfo.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XPartitionInfo using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartitionInfo.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XPartitionInfo element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartitionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPartitionInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:DexCom.ReceiverApi.DeviceRegistryInfo">
            <summary>
            Describes an attached receiver in the host registry in terms of its device driver and specific COM port
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.DeviceRegistryInfo.ToString">
            <summary>Dumps registry info out in XML format</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.DeviceRegistryInfo.ToXml">
            <summary>Converts registry info to XML format</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.DeviceRegistryInfo.ToXml(System.Xml.XmlDocument)">
            <summary>
            Converts registry info to XML format, stores in <paramref name="ownerDocument"/>
            </summary>
            <param name="ownerDocument"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.DeviceRegistryInfo.CompareTo(System.Object)">
            <summary>
            Compares/Sorts by largest reference count, then port name, then vendorID/productID, and then device instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.UsbDeviceClassKey">
            <summary>Device class key</summary>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.UsbDeviceInstance">
            <summary>Device instance</summary>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.UsbVidPid">
            <summary>Device driver vendor/product id</summary>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.ReferenceCount">
            <summary>Indicates device attached state. Nonzero if attached. Zero if detached</summary>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.PortName">
            <summary>Name and number of the port assigned by the OS to the attached device</summary>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.PortNumber">
            <summary>Number of the port assigned by the OS to the attached device</summary>
        </member>
        <member name="P:DexCom.ReceiverApi.DeviceRegistryInfo.Xml">
            <summary>Retrieves registry info in XML format</summary>
        </member>
        <member name="T:DexCom.ReceiverApi.GlobalReceiverRegistryTools">
            <summary>
            
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.GlobalReceiverRegistryTools.GetPortNameForDeviceInstance(System.String,System.String)">
            <summary>
            Find the virtual com port name of a global receiver's usb device instance (usb hub/port id).
            </summary>
            <param name="usbVendorProduct">Like '5&amp;310860c&amp;0&amp;2' as found in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\DeviceClasses\{a5dcbf10-6530-11d2-901f-00c04fb951ed}\##?#USB#VID_15A2&amp;PID_0028#5&amp;310860c&amp;0&amp;2#{a5dcbf10-6530-11d2-901f-00c04fb951ed}</param>
            <param name="usbDeviceInstance">Like 'VID_22A3&amp;PID_0047' as found in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\USB\VID_22A3&amp;PID_0047\5&amp;fdc3117&amp;0&amp;2\Device Parameters</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.GlobalReceiverRegistryTools.GetListOfFailedAttachedReceivers">
            <summary>
            Attempts to see if any global receivers were attached before the driver was pre-installed and could now show up as "Unknown" in device manager.
            Should look like "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\USB\VID_22A3&amp;PID_0047\5&amp;fdc3117&amp;0&amp;2\DeviceDesc = "DexCom Gen4 USB Serial" indicating
            the global receiver's description of itself before a successful driver installation changes the description to something like "@oem69.inf,%atmelevk1105cdc%;DexCom USB/COM Port Driver"
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.GlobalReceiverRegistryTools.GetGlobalReceiverDeviceList">
            <summary>
            Fetch the list of all global receiver devices that have ever been (or are currently) attached to this computer.  ReferenceCount will be non-zero if the device is currently attached.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DexCom.Common.StringUtils">
            <summary>
            Summary description for StringUtils.
            </summary>
        </member>
        <member name="M:DexCom.Common.StringUtils.IsUniqueName(System.String,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="strName"></param>
            <param name="otherNames"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.IsNameValidFileName(System.String)">
            <summary>
            Check to see if the specified name is valid as a file name.
            </summary>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.GetInvalidFileNameChars">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.IsNameValidFileName(System.String,System.Char[])">
            <summary>
            Check to see if the specified name is valid as a file name and checks for any specified invalid chars also.
            </summary>
            <param name="strName"></param>
            <param name="otherInvalidChars"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.EnsureValidFileName(System.String)">
            <summary>
            If not a valid file name, then replace invalid chars with "_"
            </summary>
            <param name="fileName"></param>
            <returns>Valid file name ready to use.</returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.EnsureValidFileName(System.String,System.Char)">
            <summary>
            If not a valid file name, then replace invalid chars with specified replacement char.
            </summary>
            <param name="fileName"></param>
            <param name="replacementChar"></param>
            <returns>Valid file name ready to use.</returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.UniqueNewName(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="strBaseName"></param>
            <param name="strOtherNames"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.UniqueCopyOfName(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="strBaseName"></param>
            <param name="strOtherNames"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.StringUtils.ToHexString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:DexCom.Common.Crc">
            <summary>
            This class calculates an 8, 16, or 32 bit CRC
            </summary>
        </member>
        <member name="M:DexCom.Common.Crc.CalculateCrc8(System.UInt32)">
            <summary>
            Calculates an 8 bit CRC
            </summary>
            <param name="data">Data used to calculate the CRC on</param>
            <returns>Value of 8 bit CRC</returns>
        </member>
        <member name="M:DexCom.Common.Crc.CalculateCrc16(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculate a 16 bit CRC.
            </summary>
            <param name="buf">Array of bytes to calculate the CRC for.</param>
            <param name="start">Offset in array to start at (inclusive).</param>
            <param name="end">Offset in array to end at (exclusive).</param>
            <returns>Value of 16 bit CRC</returns>
        </member>
        <member name="M:DexCom.Common.Crc.CalculateCrc32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates a 32 bit CRC
            </summary>
            <param name="buf">Array of bytes to calculate the CRC for.</param>
            <param name="start">Offset in array to start at (inclusive).</param>
            <param name="end">Offset in array to end at (exclusive).</param>
            <returns>Value of 32 bit CRC</returns>
        </member>
        <member name="M:DexCom.Common.Crc.#cctor">
            <summary>
            Static Constructor
            </summary>
        </member>
        <member name="M:DexCom.Common.Crc.DoGenerateCrc32Table">
            <summary>
            Generates the 32 bit CRC Table
            </summary>
        </member>
        <member name="T:DexCom.ReceiverTools.MeterRecord">
            <summary>
            Represents a meter (blood entry) record stored in the receiver database
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.Value">
            <summary>Blood glucose value entered by user</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.MeterSystemTime">
            <summary>Blood draw time, backdated by receiver from a recorded blood entry time <see cref="P:DexCom.ReceiverTools.MeterRecord.SystemTime"/></summary>
            <remarks>In terms of the fixed, internal receiver clock initialized during manufacturing</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.MeterDisplayTime">
            <summary>Blood draw time, backdated by receiver from a recorded blood entry time <see cref="P:DexCom.ReceiverTools.MeterRecord.DisplayTime"/></summary>
            <remarks>In terms of the time as displayed to the user at the time of blood entry</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.SystemTime">
            <summary>Time that the record was created, according to the internal receiver clock initialized during manufacturing</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.DisplayTime">
            <summary>Time that the record was created, according to the time as displayed to the user at the moment the record was created</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.RecordNumber">
            <summary>Zero-based receiver partition record number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.MeterRecord.Tag">
            <summary>Storage provided for custom client storage</summary>
        </member>
        <member name="T:DexCom.ReceiverTools.EstimatedGlucoseRecord">
            <summary>
            Represents an estimated glucose record stored in the receiver database
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.SystemTime">
            <summary>Time that the record was created, according to the internal receiver clock initialized during manufacturing</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.DisplayTime">
            <summary>Time that the record was created, according to the time as displayed to the user at the moment the record was created</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.Value">
            <summary>Estimated glucose value</summary>
            <remarks>Range of values: 40 to 400 mg/dL. A value of 39 mg/dL represents a value of 39 mg/dL or below. A value of 401 mg/dL represents a valud of 401 mg/dL or greater. 
            A value of 0 mg/dL corresponds to a invalid calculation result as further described by <see cref="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.SpecialValue"/></remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.SpecialValue">
            <summary>Indicates cause of invalid glucose calculation result</summary>
            <list><item>SensorNotActive</item><item>NoAntenna</item><item>SensorOutOfCal</item><item>RFBadStatus</item><item>Aberration</item><item>Unknown</item></list>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.TrendArrow">
            <summary>Trend arrow state as defined by <see cref="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.TrendArrow"/></summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.IsNoisy">
            <summary>Indicates whether any noise was detected by the receiver</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.IsImmediateMatch">
            <summary>Indicates whether an estimated glucose value was calculated against temporary calibration</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.IsDisplayOnly">
            <summary>Indicates whether an estimated glucose value is utilized in glucose trend estimates</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.RecordNumber">
            <summary>Unique receiver database record number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.EstimatedGlucoseRecord.Tag">
            <summary>Storage provided for custom client storage</summary>
        </member>
        <member name="T:DexCom.ReceiverTools.SettingsRecord">
            <summary>
            Represents a settings record stored in the receiver database
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.SystemTime">
            <summary>Time that the record was created, according to the internal receiver clock initialized during manufacturing</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.DisplayTime">
            <summary>Time that the record was created, according to the time as displayed to the user at the moment the record was created</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.DisplayTimeOffset">
            <summary>Offset between the time displayed on the receiver and the receiver's internal (system) clock</summary>
            <remarks>Established when user modifies the receiver's dislay time</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.SystemTimeOffset">
            <summary>Offset between the receiver's internal clock and 12:00:00 AM 2009 UTC</summary>
            <remarks>Fixed at receiver manufacture</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsBlinded">
            <summary>If receiver is blinded</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.Language">
            <summary>Receiver language</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.LanguageCode">
            <summary>Receiver language code</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.TransmitterId">
            <summary>Id of the transmitter configured on the receiver</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsTwentyFourHourTime">
            <summary>If the receiver display clock format is 24 hours</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsSetUpWizardEnabled">
            <summary>If the receiver setup wizard is enabled</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.WizardState">
            <summary>State of the receiver setup wizard</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.WizardStateCode">
            <summary>Code associate with the state of the receiver setup wizard</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.TimeLossOccurred">
            <summary>If the receiver internal (system) clock has lost time (e.g. due to a static discharge)</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.AlertProfile">
            <summary>User alert profile, as defined by <see cref="T:DexCom.ReceiverTools.UserAlertProfile"/></summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.HighAlarmLevelValue">
            <summary>Glucose value at which high alarm will trip</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.HighAlarmSnoozeTime">
            <summary>High glucose alarm snooze time in minutes</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsHighAlarmEnabled">
            <summary>If high glucose alarm is enabled</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.LowAlarmLevelValue">
            <summary>Glucose value at which low alarm will trip</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.LowAlarmSnoozeTime">
            <summary>Low glucuose alarm snooze time in minutes</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsLowAlarmEnabled">
            <summary>If low glucose alarm is enabled</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.RiseRateValue">
            <summary>Rate of glucose increase at which rise rate alarm will trip</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsRiseRateAlarmEnabled">
            <summary>Is glucose rise rate alarm is enabled</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.FallRateValue">
            <summary>Rate of glucose decrease at which fall rate alarm will trip</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsFallRateAlarmEnabled">
            <summary>Is glucose fall rate alarm is enabled</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.OutOfRangeAlarmSnoozeTime">
            <summary>Glucose out of range alarm snooze time in minutes</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.IsOutOfRangeAlarmEnabled">
            <summary>If glucose out of range alarm is enabled</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.RecordNumber">
            <summary>Unique receiver database record number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.SettingsRecord.Tag">
            <summary>Storage provided for custom client storage</summary>
        </member>
        <member name="T:DexCom.ReceiverTools.InsertionTimeRecord">
            <summary>
            Represents a (sensor) insertion record stored in the receiver database
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.SystemTime">
            <summary>Time that the record was created, according to the internal receiver clock initialized during manufacturing</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.DisplayTime">
            <summary>Time that the record was created, according to the time as displayed to the user at the moment the record was created</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.InsertionSystemTime">
            <summary>Time recorded at insertion of sensor, according to internal receiver clock</summary>
            <remarks>In terms of the fixed, internal receiver clock initialized during manufacturing</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.InsertionDisplayTime">
            <summary>Time recorded at insertion of sensor</summary>
            <remarks>In terms of the time as displayed to the user at the time of sensor insertion</remarks>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.IsInserted">
            <summary>Sensor insertion state</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.SessionState">
            <summary>State of a sensor as defined by <see cref="T:DexCom.ReceiverTools.SensorSessionState"/></summary>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.RecordNumber">
            <summary>Unique receiver database record number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.InsertionTimeRecord.Tag">
            <summary>Storage provided for custom client storage</summary>
        </member>
        <member name="T:DexCom.ReceiverTools.FirmwareHeader">
            <summary>
            Represents a receiver's firmware header
            </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.SchemaVersion">
            <summary>Schema version</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.ApiVersion">
            <summary>API version</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.TestApiVersion">
            <summary>Test API version</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.ApiVersionNumber">
            <summary>API version number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.TestApiVersionNumber">
            <summary>Test API version number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.ProductId">
            <summary>Product Id</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.ProductName">
            <summary>Product name</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.SoftwareNumber">
            <summary>Software number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.FirmwareVersion">
            <summary>Firmware version</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.FirmwareVersionNumber">
            <summary>Firmware version number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.PortVersion">
            <summary>Port version</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.PortVersionNumber">
            <summary>Port number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.RFVersion">
            <summary>RF version</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.RFVersionNumber">
            <summary>RF version number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.DexBootVersion">
            <summary>Bootloader version </summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.DexBootVersionNumber">
            <summary>Bootloader version number</summary>
        </member>
        <member name="P:DexCom.ReceiverTools.FirmwareHeader.XFirmwareHeader">
            <summary>
            The original XML from the receiver.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverTools.TrendArrow">
            <summary>
            Defines glucose estimate trend states/positions
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.None">
            <summary>No arrow (blank)</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.DoubleUp">
            <summary>Two arrows up, greater than 3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.SingleUp">
            <summary>Arrow pointing at 12:00, between 2 and 3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.FortyFiveUp">
            <summary>Arrow pointing at 4:30, between 1 and 2mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.Flat">
            <summary>Flat arrow, between 1 and -1 mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.FortyFiveDown">
            <summary>Arrow pointing at 4:30, between -1 and -2mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.SingleDown">
            <summary>Arrow pointing at 6:00, between -2 and -3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.DoubleDown">
            <summary>Two arrows down, less than -3mg/dl/min</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.NotComputable">
            <summary>
            This is returned when the algorithm decides that it is not
            reasonable to compute trend arrow for various reasons such
            as noise etc.
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.TrendArrow.RateOutOfRange">
            <summary>
            This is used when the computed filtered rate is not within the
            range for assigning the arrows.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverTools.UserAlertProfile">
            <summary>
            Defines the alert profiles available for selection on the receiver
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.UserAlertProfile.None">
            <summary>No profile</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.UserAlertProfile.Vibrate">
            <summary>Vibrate profile</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.UserAlertProfile.Soft">
            <summary>Soft profile</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.UserAlertProfile.Normal">
            <summary>Normal profile</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.UserAlertProfile.Attentive">
            <summary>Attentive profile</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.UserAlertProfile.Hyposafe">
            <summary>Hyposafe profile</summary>
        </member>
        <member name="T:DexCom.ReceiverTools.LanguageType">
            <summary>
            Defines the different languages available for display on a receiver
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.None">
            <summary>No language defined</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.English">
            <summary>
            CultureInfo : en-US 0x0409 English (United States) 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.French">
            <summary>
            CultureInfo : fr-FR 0x040C French (France) 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.German">
            <summary>
            CultureInfo : de-DE 0x0407 German (Germany) 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Dutch">
            <summary>
            CultureInfo : nl-NL 0x0413 Dutch (Netherlands) 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Spanish">
            <summary>
            CultureInfo : es-ES_tradnl 0x040A Spanish (Spain, Traditional Sort) 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Swedish">
            <summary>
            CultureInfo : sv-SE 0x041D Swedish (Sweden) 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Italian">
            <summary>
            CultureInfo : it-IT 0x0410 Italian (Italy)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Czech">
            <summary>
            CultureInfo Name="cs-CZ" LCID="1029" EnglishName="Czech (Czech Republic)" 
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Finnish">
            <summary>
            CultureInfo Name="fi-FI" LCID="1035" EnglishName="Finnish (Finland)"
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.French_Canada">
            <summary>
            CultureInfo Name="fr-CA" LCID="3084" EnglishName="French (Canada)"
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Polish">
            <summary>
            CultureInfo Name="pl-PL" LCID="1045" EnglishName="Polish (Poland)"
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.LanguageType.Portugese_Brazil">
            <summary>
            CultureInfo Name="pt-BR" LCID="1046" EnglishName="Portuguese (Brazil)"
            </summary>
        </member>
        <member name="T:DexCom.ReceiverTools.SetUpWizardState">
            <summary>
            Indicates the last completed step of a receiver's setup
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.None">
            <summary>Undefined state of setup</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.TimeNotSet">
            <summary>Receiver display time not set</summary>
            <remarks>Not used in API versions after 2.0.1.65</remarks>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.TimeSet">
            <summary>Receiver display time set</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.TransmitterIDSet">
            <summary>Transmitter Id set</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.UserLowLevelSet">
            <summary>Low glucose alarm value enabled and alarm value set</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.UserHighLevelSet">
            <summary>High glucose alarm enabled and alarm value set</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.TimeFormatSet">
            <summary>Format of the receiver's display set</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.LanguageNotSet">
            <summary>Receiver display language not set</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SetUpWizardState.LanguageSet">
            <summary>Receiver display language set</summary>
        </member>
        <member name="T:DexCom.ReceiverTools.SensorSessionState">
            <summary>
            Defines the different states of a sensor (session)
            </summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.None">
            <summary>Undefined sensor state</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.SensorRemoved">
            <summary>User removed the sensor (i.e. pressed stop sensor on receiver)</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.SessionExpired">
            <summary>Receiver decided that the session expired</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.Aberration1">
            <summary>Receiver detected an aberrant sensor</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.Aberration2">
            <summary>Receiver detected an aberrant ssensor</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.TryingToStartSecondSession">
            <summary>User has attempted to utilize an expired sensor to start a new recording session</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.SensorShutOffDueToTimeLoss">
            <summary>Sensor disabled due to malfunction in receiver's internal (system) clock</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.SessionStarted">
            <summary>Indicates that a sensor has been inserted and is recording blood glucose without any detectable/known issues</summary>
            <remarks>
            Used to create InsertionTime records while starting a session in lieu of using a value of "None". In this case we are not shutting off the sensor, and
            there is actually no shut off reason.
            </remarks>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.BadTransmitter">
            <summary>Sensor disabled due to the receiver's determination of a failed transmitter</summary>
        </member>
        <member name="F:DexCom.ReceiverTools.SensorSessionState.Internal1">
            <summary>Non-functional sensor</summary>
        </member>
        <member name="T:DexCom.ReceiverApi.XPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XPage.Tag">
            <summary>Name of XPage</summary>
        </member>
        <member name="F:DexCom.ReceiverApi.XPage.PageDataTag">
            <summary>Name of compressed binary page data element.</summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPage.#ctor">
            <summary>
            Create a brand new XPage
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.XPage.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a brand new XPage using a specific document owner/creator.
            </summary>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPage.#ctor(System.Xml.XmlElement)">
            <summary>
            Attach to an existing XPage element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.ReceiverApi.XPage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DexCom.ReceiverApi.XPage.PageData">
            <summary>
            Handles the compression (set) and decompression (get) automatically in the XML so you can deal with the binary data only.
            </summary>
        </member>
        <member name="T:DexCom.ReceiverApi.ReceiverPort">
            <summary>
            Summary description for ReceiverPort.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.AttachReceiver">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.#ctor(DexCom.ReceiverApi.UsbComPort)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.FlushPort">
            <summary>
            Flush the comm port receive buffer.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.SetShortTimeouts">
            <summary>
            Set timeouts to ~100 milliseconds.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.SetMediumTimeouts">
            <summary>
            Set timeouts to ~1 second.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.SetNormalTimeouts">
            <summary>
            Set timeouts to ~5 seconds.
            </summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.Open(DexCom.ReceiverApi.ReceiverPort.BaudRate)">
            <summary>
            
            </summary>
            <param name="baudRate"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.Close">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteByte(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteBytes(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteBytes(System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteBytes(System.Int16)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteBytes(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteBytes(System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.WriteBytes(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.ReadByte">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.ReadBytes(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.ReadBytes(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.DoReadBytes(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.ChangeBaudRate(DexCom.ReceiverApi.ReceiverPort.BaudRate)">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.CheckDisposed">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.Finalize">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.Dispose">
            <summary></summary>
        </member>
        <member name="M:DexCom.ReceiverApi.ReceiverPort.Cleanup">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.PortName">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.PortDeviceName">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.PortNumber">
            <summary></summary>
        </member>
        <member name="E:DexCom.ReceiverApi.ReceiverPort.BytesWritten">
            <summary></summary>
        </member>
        <member name="E:DexCom.ReceiverApi.ReceiverPort.BytesRead">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.CurrentBaudRate">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.IsOpen">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.IsReceiverAttached">
            <summary></summary>
        </member>
        <member name="P:DexCom.ReceiverApi.ReceiverPort.IsDisposed">
            <summary></summary>
        </member>
        <member name="T:DexCom.ReceiverApi.ReceiverPort.BaudRate">
            <summary></summary>
        </member>
        <member name="F:DexCom.ReceiverApi.ReceiverPort.BaudRate.Unknown">
            <summary></summary>
        </member>
        <member name="F:DexCom.ReceiverApi.ReceiverPort.BaudRate.Firmware">
            <summary></summary>
        </member>
        <member name="T:DexCom.Common.Tools">
            <summary>
            Summary description for Common.Tools
            </summary>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertToString(System.Guid)">
            <summary>
            Online global standard for formatting types to a string.
            </summary>
            <param name="guid">Guid to convert to a string with braces and all upper case.</param>
            <returns>Guid converted to a string with braces and all upper case.</returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertToString(System.DateTime)">
            <summary>
            Online global standard for formatting types to a string.
            </summary>
            <param name="dt">DateTime to convert to a string with ISO 8601 format and fractional (1/1000) seconds (if not whole seconds).</param>
            <returns>DateTime converted to a string with ISO 8601 format and fractional (1/1000) seconds (if not whole seconds).</returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertToString(System.DateTimeOffset)">
            <summary>
            Online global standard for formatting types to a string.
            </summary>
            <param name="dto">DateTimeOffset to convert to a string with ISO 8601 format and fractional (1/1000) seconds (if not whole seconds) and offset from UTC.</param>
            <returns>DateTime converted to a string with ISO 8601 format and fractional (1/1000) seconds (if not whole seconds) and offset from UTC.</returns>
        </member>
        <member name="M:DexCom.Common.Tools.NullableComparerHelper``1(``0,``0,System.Comparison{``0})">
            <summary>
            A helper to compare two object where either or both might be null and then using supplied function for comparison.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.RemoveDuplicates``1(System.Collections.Generic.List{``0})">
            <summary>
            Assumes sorted with duplicates next to each other.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:DexCom.Common.Tools.NullableCaparerHelper``1(``0,``0)">
            <summary>
            A helper to compare two object where either or both might be null and then using the object's CompareTo method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.ParseTimeSpan(System.String,System.TimeSpan@)">
            <summary>
            Attempts to parse a standard TimeSpan string.  If failure, the attemps to parse as a 64bit ticks value.
            </summary>
            <param name="timeSpanString">.NET TimeSpan parsable string or 64bit number for ticks.  Empty string implies TimeSpan.Zero.</param>
            <param name="timeSpanValue">output TimeSpan value if parsed.</param>
            <returns>True if parsed, False otherwise.</returns>
        </member>
        <member name="M:DexCom.Common.Tools.RevisionToString(System.UInt32)">
            <summary>
            Converts a 32 bit revision number (like 0x01020304) to a string (like "1.2.3.4")
            </summary>
            <param name="revision"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.StringToRevision(System.String)">
            <summary>
            Converts a string (like "1.2.3.4") to a 32 bit revision number (like 0x01020304)
            </summary>
            <param name="revision"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.UnpackRevisionNumber(System.String,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Upacks a revision string (like "1.2.3.4") to its defined parts: Major=1, Minor=2, Revision=3, Build=4
            </summary>
            <param name="revisionValue"></param>
            <param name="major">Bumped when breaking changes are made (like deletions or redefinition).</param>
            <param name="minor">Bumped when adding new features but still compatible with prior.</param>
            <param name="revision">Bumped when fixing internal issues or changes to implementation that does not affect public use.</param>
            <param name="build">Bumped for each build.</param>
        </member>
        <member name="M:DexCom.Common.Tools.UnpackRevisionNumber(System.UInt32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Upacks a revision number (like 0x01020304) to its defined parts: Major=1, Minor=2, Revision=3, Build=4
            </summary>
            <param name="revisionValue"></param>
            <param name="major">Bumped when breaking changes are made (like deletions or redefinition).</param>
            <param name="minor">Bumped when adding new features but still compatible with prior.</param>
            <param name="revision">Bumped when fixing internal issues or changes to implementation that does not affect public use.</param>
            <param name="build">Bumped for each build.</param>
        </member>
        <member name="M:DexCom.Common.Tools.FormatXml(System.Xml.XmlDocument)">
            <summary>
            
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.FormatXml(System.String)">
            <summary>
            
            </summary>
            <param name="strXml"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.CreateFlattenedXmlAttributesList(System.Xml.XmlElement,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="xmlElement"></param>
            <param name="currentPath"></param>
            <param name="attributeList"></param>
        </member>
        <member name="M:DexCom.Common.Tools.GeneratePathFromGuid(System.Guid)">
            <summary>
            Method to represent a guid as a path.
            </summary>
            <param name="guid"></param>
            <returns>Guid split apart into a representative path.</returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetHardwareId">
            <summary>
            Attempts to obtain the Hardware Id for this computer as obtained by registry entry @"HKEY_LOCAL_MACHINE\SYSTEM\WPA\SigningHash-*"
            NOTE: This will probably fail for anything older than WinXP ... and return empty string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetVolumeSerialNumber">
            <summary>
            Gets the volume serial number of the system drive ... which changes on each format and is NOT the drive's hardware serial number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetVolumeSerialNumber(System.String)">
            <summary>
            Gets the a volume's serial number ... which changes on each format and is NOT the drive's hardware serial number.
            </summary>
            <param name="strDriveRoot">C:\ or other root path on a drive.</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetDnsHostName">
            <summary>
            Get the DNS host name of this computer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetDnsHostIp">
            <summary>
            Get the (first) IP Address for this computer's Dns.HostName
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetMacAddress">
            <summary>
            Gets the first adapter's MAC address found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetNetworkInfo">
            <summary>
            Creates a "NetworkInfo" element filled with HostEntry and Adapter information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetDriveSignatureForHardDrive0">
            <summary>
            Get the "Signature" of the first phsyical hard drive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.AddDocumentSignature(System.Xml.XmlDocument)">
            <summary>
            WARNING:  This is not very strong security for authenticating a signer.  The purpose of this method is to add a simple wrapper (signature) over the document to verify that it's contents were not modified.  Note that anyone could read the document, modify it, and then re-signed it!
            </summary>
            <param name="xDocument">XML Document to be signed.  Don't alter in any way after signing!!!</param>
        </member>
        <member name="M:DexCom.Common.Tools.RemoveDocumentSignature(System.Xml.XmlDocument)">
            <summary>
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.ReplaceDocumentSignature(System.Xml.XmlDocument)">
            <summary>
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.VerifyDocumentSignature(System.Xml.XmlDocument)">
            <summary>
            Verfify that the XML Document's signature matches the contents of the document.  NOTE:  The signature must have the public key embedded and the document must have been loaded with whitespace preserved.
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.VerifyDocumentSignature(System.String)">
            <summary>
            Verfify that the XML Document's signature matches the contents of the document.  NOTE:  The signature must have the pulic key embedded.
            </summary>
            <param name="strFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.IsRoleMember(System.String)">
            <summary>
            </summary>
            <param name="strRoleName"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetBuiltInAdminstratorsGroupName">
            <summary>
            Get the name of the built in "Adminstrators" group name ... works on localized Windows OS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.UTF8ByteArrayToString(System.Byte[])">
            <summary>
            To convert a Byte Array of Unicode values (UTF-8 encoded) to a complete String.
            </summary>
            <param name="charActers">Unicode Byte Array to be converted to String</param>
            <returns>String converted from Unicode Byte Array</returns>
        </member>
        <member name="M:DexCom.Common.Tools.StringToUTF8ByteArray(System.String)">
            <summary>
            Converts the String to UTF8 Byte array and is used in De serialization
            </summary>
            <param name="pXmlString"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.CleanupFolder(System.IO.DirectoryInfo,System.Boolean,System.String,System.TimeSpan)">
            <summary>
            Removes files and folder below specified folder that are older than timespan specified.
            </summary>
            <param name="directoryInfo"></param>
            <param name="includeSubFolders"></param>
            <param name="filePattern">Empty for all files or specifiy a wildcard file pattern.</param>
            <param name="olderThan">ex. TimeSpan.FromDays(1)</param>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertDateTimeToMatlabDays(System.DateTime)">
            <summary>
            Convert a .NET DateTime object to MATLAB's strange days value.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertMatlabDaysToDateTime(System.Double)">
            <summary>
            Convert MATLAB's strange days value to a .NET DateTime object.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertDateTimeToExcelDays(System.DateTime,System.Boolean)">
            <summary>
            Convert a .NET DateTime object to EXCEL's strange days value.
            </summary>
            <param name="input">DateTime to convert to EXCEL days value since 1900 where 1900/1/1 will be 1.0</param>
            <param name="useExcelBug">Whether or not to use the 1900 leap year bug in EXCEL.  Use false here only if you went out of your way to set the "Use 1904 Dates" option in EXCEL</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertExcelDaysToDateTime(System.Double,System.Boolean)">
            <summary>
            Convert EXCEL's strange days value to a .NET DateTime object.
            </summary>
            <param name="input">Double value for days since 1900 from EXCEL where 1.0 is 1900/1/1.</param>
            <param name="useExcelBug">Whether or not to use the 1900 leap year bug in EXCEL.  Use false here only if you went out of your way to set the "Use 1904 Dates" option in EXCEL</param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.TruncateDateTimeToMinutes(System.DateTime)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.LocalClockOffset(System.Boolean@)">
            <summary>
            Uses SNTP to fetch internet time and calculate the offset/error of the local clock.
            </summary>
            <param name="connected">Output value set to true if we connected to an internet time server successfully.</param>
            <returns>TimeSpan.Zero on failure to connect or feature disabled.</returns>
        </member>
        <member name="M:DexCom.Common.Tools.SetLocalTime(System.DateTime)">
            <summary>
            Set the local clock to the specified date/time.
            </summary>
            <param name="dateTimeNow"></param>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertMG_DL_To_MMOL_L(System.UInt32)">
            <summary>
            Converts mg/dL to mmol/L (WITH NO Rounding)
            </summary>
            <param name="mg_dl">mg/dL value</param>
            <returns>mmol/L (NOT Rounded)</returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertMG_DL_To_MMOL_L(System.UInt32,System.Int32)">
            <summary>
            Converts mg/dL to mmol/L (WITH Rounding)
            </summary>
            <param name="mg_dl">mg/dL value</param>
            <param name="digits">Number of digits of precision for rounding.</param>
            <returns>mmol/L (Rounded to precision specified)</returns>
        </member>
        <member name="M:DexCom.Common.Tools.ConvertMMOL_L_To_MG_DL(System.Double)">
            <summary>
            Converts mmol/L to mg/dL
            </summary>
            <param name="mmol_l">mmol/L value</param>
            <returns>mg/dL value</returns>
        </member>
        <member name="M:DexCom.Common.Tools.IsRemovableDriveAttached">
            <summary>
            Detects if there is a (non-floppy) removable drive attached like a USB memory stick.
            Errors are ignored and so is the A: drive since it would normally be a floppy drive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Tools.GetRemovableDriveList">
            <summary>
            Returns the list of DriveInfo items that might be removable drives like USB memory sticks.
            Errors are ignored and so is the A: drive since it would normally be a floppy drive.
            </summary>
            <returns></returns>
        </member>
        <member name="T:InternetTime._LeapIndicator">
            <summary>
            Leap indicator field values
            </summary>
        </member>
        <member name="F:InternetTime._LeapIndicator.NoWarning">
            <summary>0 - No warning</summary>
        </member>
        <member name="F:InternetTime._LeapIndicator.LastMinute61">
            <summary>1 - Last minute has 61 seconds</summary>
        </member>
        <member name="F:InternetTime._LeapIndicator.LastMinute59">
            <summary>2 - Last minute has 59 seconds</summary>
        </member>
        <member name="F:InternetTime._LeapIndicator.Alarm">
            <summary>3 - Alarm condition (clock not synchronized)</summary>
        </member>
        <member name="T:InternetTime._Mode">
            <summary>
            Mode field values
            </summary>
        </member>
        <member name="F:InternetTime._Mode.SymmetricActive">
            <summary>1 - Symmetric active</summary>
        </member>
        <member name="F:InternetTime._Mode.SymmetricPassive">
            <summary>2 - Symmetric pasive</summary>
        </member>
        <member name="F:InternetTime._Mode.Client">
            <summary>3 - Client</summary>
        </member>
        <member name="F:InternetTime._Mode.Server">
            <summary>4 - Server</summary>
        </member>
        <member name="F:InternetTime._Mode.Broadcast">
            <summary>5 - Broadcast</summary>
        </member>
        <member name="F:InternetTime._Mode.Unknown">
            <summary>0, 6, 7 - Reserved</summary>
        </member>
        <member name="T:InternetTime._Stratum">
            <summary>
            Stratum field values
            </summary>
        </member>
        <member name="F:InternetTime._Stratum.Unspecified">
            <summary>0 - unspecified or unavailable</summary>
        </member>
        <member name="F:InternetTime._Stratum.PrimaryReference">
            <summary>1 - primary reference (e.g. radio-clock)</summary>
        </member>
        <member name="F:InternetTime._Stratum.SecondaryReference">
            <summary>2-15 - secondary reference (via NTP or SNTP)</summary>
        </member>
        <member name="F:InternetTime._Stratum.Reserved">
            <summary>16-255 - reserved</summary>
        </member>
        <member name="T:InternetTime.SNTPClient">
            <summary>
            SNTPClient is a C# class designed to connect to time servers on the Internet and
            fetch the current date and time. Optionally, it may update the time of the local system.
            The implementation of the protocol is based on the RFC 2030.
            </summary>
        </member>
        <member name="F:InternetTime.SNTPClient.DestinationTimestamp">
            <summary>
            Destination Timestamp (T4)
            </summary>
        </member>
        <member name="M:InternetTime.SNTPClient.#ctor(System.String)">
            <summary></summary>
            <param name="host"></param>
        </member>
        <member name="M:InternetTime.SNTPClient.Connect(System.Boolean)">
            <summary>
            Connect to the time server and update system time ... will never timeout if server does not respond.
            </summary>
            <param name="UpdateSystemTime"></param>
        </member>
        <member name="M:InternetTime.SNTPClient.Connect(System.Boolean,System.Int32)">
            <summary>
            Connect to the time server and update system time
            </summary>
            <param name="UpdateSystemTime"></param>
            <param name="ReceiveTimeout"></param>
        </member>
        <member name="M:InternetTime.SNTPClient.IsResponseValid">
            <summary>
            Check if the response from server is valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:InternetTime.SNTPClient.ToString">
            <summary>
            Converts the object to string
            </summary>
            <returns></returns>
        </member>
        <member name="P:InternetTime.SNTPClient.LeapIndicator">
            <summary>
            Leap Indicator
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.VersionNumber">
            <summary>
            Version Number
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.Stratum">
            <summary>
            Stratum
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.PollInterval">
            <summary>
            Poll Interval (in seconds)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.Precision">
            <summary>
            Precision (in seconds)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.RootDelay">
            <summary>
            Root Delay (in milliseconds)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.RootDispersion">
            <summary>
            Root Dispersion (in milliseconds)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.ReferenceID">
            <summary>
            Reference Identifier
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.ReferenceTimestamp">
            <summary>
            Reference Timestamp
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.OriginateTimestamp">
            <summary>
            Originate Timestamp (T1)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.ReceiveTimestamp">
            <summary>
            Receive Timestamp (T2)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.TransmitTimestamp">
            <summary>
            Transmit Timestamp (T3)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.RoundTripDelay">
            <summary>
            Round trip delay (in milliseconds)
            </summary>
        </member>
        <member name="P:InternetTime.SNTPClient.LocalClockOffset">
            <summary>
            Local clock offset (in milliseconds)
            </summary>
        </member>
        <member name="T:DexCom.Common.Data.XCollection`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strCollectionName"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.#ctor(System.String,System.Xml.XmlDocument)">
            <summary>
            
            </summary>
            <param name="strCollectionName"></param>
            <param name="ownerDocument"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.#ctor(System.Xml.XmlElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="newT"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.RemoveFirstIf(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.FindFirstIf(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.FindLastIf(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:DexCom.Common.Data.XCollection`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:DexCom.Common.Data.XCollection`1.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XCollection`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:DexCom.Common.Data.XCollection`1.Count">
            <summary>
            Count of T elements in the collection.
            </summary>
        </member>
        <member name="P:DexCom.Common.Data.XCollection`1.Items">
            <summary>
            Allows enumeration of the collection.
            </summary>
        </member>
    </members>
</doc>
